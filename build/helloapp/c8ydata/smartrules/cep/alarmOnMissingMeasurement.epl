/* the id of MO with rule's configuration: ${ruleId} */

@Resilient
create schema InputData_0_${ruleId} (
    measurement Measurement,
    rule ManagedObject
);

@Resilient
create schema InputData_${ruleId} (
    measurement Measurement,
    rule ManagedObject
);

@Resilient
create schema OutputData_${ruleId} (
    measurement Measurement,
    rule ManagedObject,
    time long
);

@Resilient
create schema MissingMeasurement_${ruleId} (
    lastInput InputData_${ruleId},
    lastOutput OutputData_${ruleId}
);

@Resilient
create context Measurements_${ruleId} partition by
    measurement.source, measurement.type from InputData_${ruleId},
    measurement.source, measurement.type from OutputData_${ruleId};

@Resilient    
@Name("GetRuleConfiguration")
insert into
    InputData_0_${ruleId}
select
    measurement as measurement,
    findManagedObjectById("${ruleId}") as rule
from
    MeasurementCreated;

@Resilient    
@Name("ValidateMeasurement")
insert into
    InputData_${ruleId}
select
    measurement as measurement,
    rule as rule
from
    InputData_0_${ruleId}
where
    measurement.type = getString(rule, "config.measurementType")
    and (measurement.source.value in (getList(rule, "enabledSources"))
        or (getList(rule, "enabledSources") is null and measurement.source.value not in (getList(rule, "disabledSources"))));

@Resilient        
@Name("CheckMeasurementsEveryMinute")
context Measurements_${ruleId}
insert into MissingMeasurement_${ruleId}
select
    (select * from InputData_${ruleId}.std:lastevent()) as lastInput,
    (select * from OutputData_${ruleId}.std:lastevent()) as lastOutput
from
    pattern [every timer:at(*, *, *, *, *, 0)];

@Resilient    
@Name("ValidateDuration")
insert into OutputData_${ruleId}
select
    lastInput.measurement as measurement,
    lastInput.rule as rule,
    current_timestamp() as time
from
    MissingMeasurement_${ruleId}
where
    lastInput is not null and
    lastInput.measurement.time.before(current_timestamp(), cast(getNumber(lastInput.rule, "config.timePeriod"), long) seconds)
    and (
        lastOutput is null or
        lastOutput.time.before(current_timestamp(), cast(getNumber(lastOutput.rule, "config.timePeriod"), long) seconds)
    );

@Resilient    
@Name("CreateAlarm")
expression String js:eval(measurement, text) [
    text
        .replace("#{type}", measurement.type)
]
insert into CreateAlarm
select
    measurement.source as source,
    "ACTIVE" as status,
    current_timestamp().toDate() as time,
    getString(rule, "config.alarmType") as type,
    getString(rule, "config.alarmSeverity") as severity,
    eval(measurement, getString(rule, "config.alarmText")) as text
from
    OutputData_${ruleId};
    
