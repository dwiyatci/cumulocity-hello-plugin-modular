/* the id of MO with rule's configuration: ${ruleId}*/
@Resilient
create schema InputData_0_${ruleId} (
	measurementCreated MeasurementCreated,
	config ThresholdRuleConfig,
	sourceId Object
);

@Name("GetRuleConfiguration")
@Resilient
insert into InputData_0_${ruleId}
select
	mc as measurementCreated,
	getThresholdRuleConfig ("${ruleId}", mc.measurement.source.value) as config,
	mc.measurement.source.value as sourceId
from MeasurementCreated mc;

@Resilient
create schema InputData_1_${ruleId} (
	measurementCreated MeasurementCreated,
	config ThresholdRuleConfig,
	value BigDecimal
);

@Name("ValidateMeasurementSource")
@Resilient
insert into InputData_1_${ruleId}
select
	measurementCreated as measurementCreated,
	config as config,
	getNumber(measurementCreated.measurement, config.valuePath) as value
from InputData_0_${ruleId}
where
	config is not null
	and config.isValid()
	and (
		sourceId in (config.enabledSources)
		or (config.enabledSources is null and sourceId not in (config.disabledSources))
	);

@Resilient
create schema InputData_${ruleId} (
	measurementCreated MeasurementCreated,
	config ThresholdRuleConfig,
	color String
);

@Name("ValidateMeasurement")
@Resilient
expression getColor(i) {
	i => case
		when (i.value in [i.config.yellowMin: i.config.yellowMax)) then "Y"
		when (i.value in [i.config.redMin: i.config.redMax]) then "R"
		else "G"
	end
}
insert into InputData_${ruleId}
select
	measurementCreated as measurementCreated,
	config as config,
	getColor(inputData) as color
from InputData_1_${ruleId} inputData
where inputData.value is not null;

@Resilient
create schema InputDataPair_${ruleId} (
	firstAlarm InputData_${ruleId},
	secondAlarm InputData_${ruleId}
);

@Resilient
create context Measurements_${ruleId}
	partition by measurementCreated.measurement.source from InputData_${ruleId};

@Name("TakeLastTwoMeasurements")
@Resilient
context Measurements_${ruleId}
insert into InputDataPair_${ruleId}
select
	first(*) as firstAlarm,
	last(*) as secondAlarm
from
	InputData_${ruleId}.win:length(2)
having first(color) != last(color) or first(measurementCreated.id) = last(measurementCreated.id);

@Resilient
create schema OutputAlarm_0_${ruleId} (
	status CumulocityAlarmStatuses,
	severity CumulocitySeverities,
	config ThresholdRuleConfig,
	measurement Measurement
);

@Name("ResolveSeverityAndStatusForThresholdAlarm")
@Resilient
expression getSeverity(idp) {
	idp => case when idp.firstAlarm.measurementCreated.id = idp.secondAlarm.measurementCreated.id
		then
			case idp.secondAlarm.color
				when "Y" then CumulocitySeverities.MINOR
				when "R" then CumulocitySeverities.CRITICAL
				when "G" then null
			end
		else
			case idp.firstAlarm.color || idp.secondAlarm.color
				when "GY" then CumulocitySeverities.MINOR
				when "GR" then CumulocitySeverities.CRITICAL
				when "YG" then null
				when "YR" then CumulocitySeverities.CRITICAL
				when "RG" then null
				when "RY" then CumulocitySeverities.MINOR
			end
		end
}
expression getStatus(idp) {
	idp => case idp.secondAlarm.color
		when "G" then CumulocityAlarmStatuses.CLEARED
		else CumulocityAlarmStatuses.ACTIVE
	end
}
insert into OutputAlarm_0_${ruleId}
select
	getStatus(idp) as status,
	getSeverity(idp) as severity,
	idp.secondAlarm.config as config,
	idp.secondAlarm.measurementCreated.measurement as measurement
from InputDataPair_${ruleId} idp;

@Resilient
create schema OutputAlarm_${ruleId} (
	status CumulocityAlarmStatuses,
	severity CumulocitySeverities,
	text String,
	type String,
	previousAlarm Alarm,
	measurement Measurement
);

@Name("GetLatestActiveAlarmOfSameType")
@Resilient
insert into OutputAlarm_${ruleId}
select
	status as status,
	severity as severity,
	config.alarmText as text,
	config.alarmType as type,
	findFirstAlarmBySourceAndStatusAndType(measurement.source.value, "ACTIVE", config.alarmType) as previousAlarm,
	measurement as measurement
from OutputAlarm_0_${ruleId} o;

@Name("CreateAlarm")
@Resilient
expression String js:eval(measurement, text) [
	text
		.replace("#{type}", measurement.type)
		.replace("#{time}", measurement.time)
		.replace("#{sourceId}", measurement.source.value)
]
insert into CreateAlarm
select
	status as status,
	severity as severity,
	measurement.source as source,
	eval(measurement, text) as text,
	type as type,
	measurement.time as time
from OutputAlarm_${ruleId}
where
	previousAlarm is null
	and status = CumulocityAlarmStatuses.ACTIVE;

@Name("UpdateAlarmSeverity")
@Resilient
insert into UpdateAlarm
select
	previousAlarm.id as id,
	status as status,
	severity as severity
from OutputAlarm_${ruleId}
where
	previousAlarm is not null
	and severity is not null;

@Name("UpdateAlarmStatus")
@Resilient
insert into UpdateAlarm
select
	previousAlarm.id as id,
	status as status
from OutputAlarm_${ruleId}
where
	previousAlarm is not null
	and severity is null;