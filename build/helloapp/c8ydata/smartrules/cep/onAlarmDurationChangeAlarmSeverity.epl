/* required parameters: duration, ruleId*/
@Resilient
create schema AlarmInput_0_${ruleId} (
	alarm Alarm,
	rule ManagedObject
);


@Resilient
create schema AlarmInput_${ruleId} (
	id String,
	source String,
	severity Severity,
	status AlarmStatus,
	duration long,
	creationTime Date
);


@Resilient
create schema AlarmOutput_${ruleId} (
	id String,
	source String,
	severity Severity,
	status AlarmStatus,
	creationTime Date
);


@Resilient
create context AlarmDurationMonitoring_${ruleId}
    context AlarmsWithGivenId partition by
    	alarm.id.value from AlarmCreated,
    	id from AlarmInput_${ruleId},
    	id from AlarmOutput_${ruleId},
    context ActiveAlarms
        start AlarmCreated(status = CumulocityAlarmStatuses.ACTIVE)
        end pattern[AlarmUpdated(status != CumulocityAlarmStatuses.ACTIVE) or AlarmOutput_${ruleId}(severity = CumulocitySeverities.CRITICAL)];

@Resilient
@Name("GetRuleConfiguration")
insert into
	AlarmInput_0_${ruleId}
select
	alarmEvent.alarm as alarm,
	findManagedObjectById("${ruleId}") as rule
from
	AlarmComplexEvent alarmEvent;

@Resilient
@Name("ValidateAlarm")
insert into
	AlarmInput_${ruleId}
select
	alarm.id.value as id,
	alarm.source.value as source,
	alarm.severity as severity,
	alarm.status as status,
	cast(getNumber(rule, "config.duration"), long) as duration,
	alarm.creationTime as creationTime
from
	AlarmInput_0_${ruleId}
where
    getString(rule, "config.alarmType").split(",").anyOf(v => alarm.type = v.trim())
	and (alarm.source.value in (getList(rule, "enabledSources"))
		or (getList(rule, "enabledSources") is null and alarm.source.value not in (getList(rule, "disabledSources"))));


@Resilient
create schema LongDurationCandidate_${ruleId} (
	lastInput AlarmInput_${ruleId},
	lastOutput AlarmOutput_${ruleId}
);


@Resilient
create expression CumulocitySeverities js:incOnDuration_${ruleId}(severity) [
	importClass (com.cumulocity.model.event.CumulocitySeverities);
	if(severity == CumulocitySeverities.WARNING) {
		CumulocitySeverities.MINOR;
	} else if(severity == CumulocitySeverities.MINOR) {
		CumulocitySeverities.MAJOR;
	} else if(severity == CumulocitySeverities.MAJOR) {
		CumulocitySeverities.CRITICAL;
	} else {
		severity
	}
];

@Resilient
@Name("CheckAlarmsEveryMinute")
context AlarmDurationMonitoring_${ruleId}
insert into LongDurationCandidate_${ruleId}
select
	(select * from AlarmInput_${ruleId}.std:lastevent()) as lastInput,
	(select * from AlarmOutput_${ruleId}.std:lastevent()) as lastOutput
from
	pattern [every timer:at(*, *, *, *, *, 0)];//every minute

@Resilient
@Name("ValidateDuration")
insert into AlarmOutput_${ruleId}
select
	lastInput.id as id,
	lastInput.status as status,
	incOnDuration_${ruleId}(coalesce(lastOutput?.severity, lastInput?.severity)) as severity,
	lastInput.source as source,
	current_timestamp().toDate() as creationTime
from LongDurationCandidate_${ruleId}
where
	lastInput is not null
	and lastInput.creationTime.before(current_timestamp(), lastInput.duration seconds)
	and (
		lastOutput is null or
		lastOutput.creationTime.before(current_timestamp(), lastInput.duration seconds)
	);

@Resilient
@Name("UpdateAlarmSeverity")
insert into UpdateAlarm
select
	a.id as id,
	a.severity as severity
from AlarmOutput_${ruleId} a;
