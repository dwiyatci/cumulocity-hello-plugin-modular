@Name("Rule_Var")
@Durable
create variable ManagedObject rule_${ruleId} = findManagedObjectById("${ruleId}");

@Name("Steps_Var")
@Durable
create variable List steps_${ruleId} = getList(rule_${ruleId}, "config.subrules");

@Name("Escalation_Input_0_Schema")
@Resilient
create schema Escalation_Input_0_${ruleId} (
	alarm Alarm
);

@Name("Escalation_Input_0_Populate")
@Resilient
insert into Escalation_Input_0_${ruleId}
select
	alarmCreated.alarm as alarm
from
	AlarmCreated alarmCreated;

@Name("Escalation_Input_Schema")
@Resilient
create schema Escalation_Input_${ruleId} (
	alarm Alarm
);

@Name("Escalation_Input_Populate")
@Resilient
insert into Escalation_Input_${ruleId}
select
	alarm as alarm
from
	Escalation_Input_0_${ruleId}
where
	not inMaintenanceMode(alarm.source)
	and getString(rule_${ruleId}, "config.alarmType").split(",").anyOf(v => alarm.type = v.trim())
	and (alarm.source.value in (getList(rule_${ruleId}, "enabledSources"))
		or (getList(rule_${ruleId}, "enabledSources") is null and alarm.source.value not in (getList(rule_${ruleId}, "disabledSources"))));

@Name("Alarm_Handler_Schema")
@Resilient
create schema AlarmHandler_${ruleId} (
	alarm Alarm,
	step int
);

@Name("Step_Output_Handler_Schema")
@Resilient
create schema StepOutputHandler_${ruleId} (
	alarm Alarm,
	success boolean,
	step int,
	stepType String
);

@Name("Step_Input_0_Schema")
@Resilient
create schema StepInput_0_${ruleId} (
	alarm Alarm,
	step int
);

@Name("Step_Input_1_Schema")
@Resilient
create schema StepInput_1_${ruleId} (
	alarm Alarm,
	step int,
	stepConfig Map
);

@Name("Step_Input_2_Schema")
@Resilient
create schema StepInput_2_${ruleId} (
	alarm Alarm,
	step int,
	stepConfig Map,
	conditionPassed boolean
);

@Name("Step_Input_Schema")
@Resilient
create schema StepInput_${ruleId} (
	alarm Alarm,
	step int,
	stepConfig Map
);

@Name("Escalation_context_def")
@Resilient
create context Escalation_Context_${ruleId} partition by
	alarm.id from Escalation_Input_${ruleId},
	alarm.id from AlarmHandler_${ruleId},
	alarm.id from StepInput_0_${ruleId},
	alarm.id from StepInput_1_${ruleId},
	alarm.id from StepInput_2_${ruleId},
	alarm.id from StepInput_${ruleId},
	alarm.id from StepOutputHandler_${ruleId};

@Name("Alarm_Handler_Populate")
@Resilient
context Escalation_Context_${ruleId}
insert into AlarmHandler_${ruleId}
select
	alarm as alarm,
	-1 as step
from Escalation_Input_${ruleId};

/**************************************************************************************/

/**
 * Triggered by alarm
 */
@Name("Handle_alarm")
@Resilient
context Escalation_Context_${ruleId}
insert into StepInput_0_${ruleId}
select
	alarm as alarm,
	step as step
from AlarmHandler_${ruleId};

/**
 * Triggered by step output
 */
@Name("Handle_last_step_output")
@Resilient
context Escalation_Context_${ruleId}
insert into StepInput_0_${ruleId}
select
	alarm as alarm,
	step as step
from StepOutputHandler_${ruleId};

/**
 * Common processing: StepInput_0 -> StepInput_1
 */
@Name("Increment_step")
@Resilient
context Escalation_Context_${ruleId}
insert into StepInput_1_${ruleId}
select
	input.alarm as alarm,
	input.step + 1 as step,
	cast(steps_${ruleId}.get(input.step + 1), java.util.Map) as stepConfig
from StepInput_0_${ruleId} input
where input.step + 1 < steps_${ruleId}.size();

@Resilient
create expression Map js:asStepLog_${ruleId}(type, success, stepConfig) [
	importClass (java.util.Map);
	importClass (java.util.HashMap);
	var result  = new HashMap();
	result.put("type", type);
	if(type === 't2s') {
		result.put("success", success);
	};
	result.put("to", stepConfig.get("to"))
	result;
];

@Name("Finish_create_log")
@Resilient
context Escalation_Context_${ruleId}
insert into CreateEvent
select
	"c8y_EscalationLog" as type,
	input.alarm.source as source,
	current_timestamp().toDate() as time,
	"Escalation rule for alarm with id " || StepInput_0_${ruleId}.alarm.id.value || " processed." as text,
	{
		"steps",
		(select * from StepOutputHandler_${ruleId}.std:unique(step)).toMap(
			k => cast(k.step + 1, java.lang.String),
			v => asStepLog_${ruleId}(v.stepType, v.success, cast(steps_${ruleId}.get(v.step), java.util.Map))
		)
	} as fragments
from StepInput_0_${ruleId} input
where input.step + 1 >= steps_${ruleId}.size();

/**
 * Common processing: StepInput_1 -> StepInput_2
 */
@Name("Evaluate_condition")
@Resilient
context Escalation_Context_${ruleId}
insert into StepInput_2_${ruleId}
select
	input.alarm as alarm,
	input.step as step,
	input.stepConfig as stepConfig,
	getNumber(input.stepConfig, "ifFailed") is null
		or (select * from StepOutputHandler_${ruleId}.std:unique(step)).anyOf(
		i => i.step = getNumber(stepConfig, "ifFailed") and i.success = false) as conditionPassed
from StepInput_1_${ruleId} input;

/**
 * Common processing: StepInput_2 -> StepInput
 * (if transition condition passed)
 */
@Name("Condition_passed")
@Resilient
context Escalation_Context_${ruleId}
insert into StepInput_${ruleId}
select
	input.alarm as alarm,
	input.step as step,
	input.stepConfig as stepConfig
from StepInput_2_${ruleId} input
where input.conditionPassed = true;

/**
 * Common processing: StepInput_2 -> StepInput_0
 * (if transition condition not passed)
 */
@Name("Condition_not_passed")
@Resilient
context Escalation_Context_${ruleId}
insert into StepInput_0_${ruleId}
select
	input.alarm as alarm,
	input.step as step
from StepInput_2_${ruleId} input
where input.conditionPassed = false;

/**************************************************************************************
*
* Send request to step and handle step response
*
*/

/**
 * Email
 */
@Name("call_email_step")
@Resilient
insert into Email_On_Alarm_Input_${ruleId}
select
	alarm as alarm,
	step as step,
	stepConfig as rule
from StepInput_${ruleId}
where
	getString(stepConfig, "ruleTemplateName") = "onAlarmSendEmail";

@Name("call_email_step_response")
@Resilient
insert into StepOutputHandler_${ruleId}
select
	*,
	"mail" as stepType
from Email_On_Alarm_Output_${ruleId};

/**
 * Sms
 */
@Name("call_sms_step")
@Resilient
insert into Sms_On_Alarm_Input_${ruleId}
select
	alarm as alarm,
	step as step,
	stepConfig as rule
from StepInput_${ruleId}
where
	getString(stepConfig, "ruleTemplateName") = "onAlarmSendSms";

@Name("call_sms_step_response")
@Resilient
insert into StepOutputHandler_${ruleId}
select
	*,
	"sms" as stepType
from Sms_On_Alarm_Output_${ruleId};

/**
 * T2S
 */
@Name("call_t2s_step")
@Resilient
insert into T2S_On_Alarm_Input_${ruleId}
select
	alarm as alarm,
	step as step,
	stepConfig as rule
from StepInput_${ruleId}
where
	getString(stepConfig, "ruleTemplateName") = "onAlarmTextToSpeechCall";

@Name("call_t2s_step_response")
@Resilient
insert into StepOutputHandler_${ruleId}
select
	*,
	"t2s" as stepType
from T2S_On_Alarm_Output_${ruleId};
