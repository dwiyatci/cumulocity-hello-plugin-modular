/* c8ydata 7.37.0 2016-10-26T09:32:24+00:00 67bf4197c279 (release/7.37.0) tip */
!function(e){var t,n=e.c8y=e.c8y||{},a=n.collections=n.collections||{};t=a.devicecommands=a.devicecommands||{},t.c8y_TixiAgent={name:"Tixi Commands",syntax:"TiXML",templates:[{name:"Query Hardware",command:'[<Get ver="v"/>]',category:"Device Info"},{name:"Query GSM state",command:'[<Get _="/GSM/" ver="v"/>]',category:"Device Info"},{name:"Query Ethernet state",command:'[<Get _="/Ethernet/" ver="v"/>]',category:"Device Info"},{name:"Query WLAN state",command:'[<Get _="/WLAN/" ver="v"/>]',category:"Device Info"},{name:"Query Firmware Version",command:'[<Get _="/Firmware/Version" ver="v"/>]',category:"Device Info"},{name:"Query Enabled Servicese",command:'[<EnableServices ver="v"/>]',category:"Device Info"},{name:"Set Time",command:'[<SetTime _="%s" ver="v"/>]',category:"Device Control"},{name:"Get Time",command:'[<GetTime ver="v"/>]',category:"Device Control"},{name:"Reset",command:'[<Reset _="Keep" ver="v"/>]',category:"Device Control"},{name:"Factory Reset",command:'[<Reset _="Factory" ver="v"/>]',category:"Device Control"},{name:"Reset Update",command:'[<Reset _="Update" ver="v"/>]',category:"Device Control"},{name:"Query Active Jobs",command:'[<GetJob ver="v"/>]',category:"Device Control"},{name:"Delete Active Jobs",command:'[<GetJob del="y" ver="v"/>]',category:"Device Control"},{name:"LogIn",command:'[<Login _="PAP" user="" password="" ver="v"/>]',category:"Device Control"},{name:"LogIn CHAP",command:'[<Login _="CHAP" user="" ver="v"/>]',category:"Device Control"},{name:"LogIn CHAP Response",command:'[<Login _="Response" id="" md5="" ver="v"/>]',category:"Device Control"},{name:"LogOut",command:'[<Logout ver="v"/>]',category:"Device Control"},{name:"Switch to ModemMode",command:'[<Switch _="ModemMode" ver="v"/>]',category:"Device Control"},{name:"Read Logfile",command:'[<ReadLog _="Datalogging_0" range="#10-" ver="v"/>]',category:"Data logging"},{name:"Read Event-Log",command:'[<ReadLog _="Event" range="#10-" ver="v"/>]',category:"Data logging"},{name:"Read Job-Report",command:'[<ReadLog _="JobReport" range="#10-" ver="v"/>]',category:"Data logging"},{name:"Read IncomingMessage-Log",command:'[<ReadLog _="IncomingMessage" range="#10-" ver="v"/>]',category:"Data logging"},{name:"Read FailedIncomingCall-Log",command:'[<ReadLog _="FailedIncomingCall" range="#10-" ver="v"/>]',category:"Data logging"},{name:"Read SupportLog",command:'[<ReadLog _="SupportLog" range="#10-" ver="v"/>]',category:"Data logging"},{name:"Read Login-Log",command:'[<ReadLog _="Login" range="#10-" ver="v"/>]',category:"Data logging"},{name:"Read Log Counter",command:'[<Get _="/LogCounter/" ver="v"/>]',category:"Data logging"},{name:"Clear All Logfiles",command:'[<Clear Log="*" ver="v"/>]',category:"Data logging"},{name:"Clear System Logfiles",command:'[<Clear Log="Event,JobReport,IncomingMessage,FailedIncomingCall,Login,SupportLog" ver="v"/>]',category:"Data logging"},{name:"TransMode",command:'[<TransMode baud="9600" format="8N1" com="C0" keep="15s" ver="v"/>]',category:"Remote Control"},{name:"Get Config",command:'[<GetConfig _="&_Path_&" ver="v">\n</GetConfig>',category:"Project data"},{name:"Set Config",command:'[<SetConfig _="&_Path_&" ver="v">\n</SetConfig>',category:"Project data"},{name:"Get USER Database",command:'[<GetConfig _="USER" ver="v"/>]',category:"Project data"},{name:"Get ISP Database",command:'[<GetConfig _="ISP" ver="v"/>]',category:"Project data"},{name:"Get EVENTS Database",command:'[<GetConfig _="EVENTS" ver="v"/>]',category:"Project data"},{name:"Get TEMPLATE Database",command:'[<GetConfig _="TEMPLATE" ver="v"/>]',category:"Project data"},{name:"Get PROCCFG Database",command:'[<GetConfig _="PROCCFG" ver="v"/>]',category:"Project data"},{name:"Get SCHEDULE Database",command:'[<GetConfig _="SCHEDULE" ver="v"/>]',category:"Project data"},{name:"Get LOG Database",command:'[<GetConfig _="LOG" ver="v"/>]',category:"Project data"},{name:"Get PARAM Database",command:'[<GetConfig _="PARAM" ver="v"/>]',category:"Project data"},{name:"Event (with Parameter)",command:'[<DoOn _="EventName" ver="v">\n  <Param _="Value"/>\n</DoOn>]',category:"Testing"},{name:"Event (no Parameter)",command:'[<DoOn _="EventName"  ver="v"/>]',category:"Testing"},{name:"Start Process",command:'[<Set _="/Process/Program/Mode" value="Run" ver="v"/>]',category:"Testing"},{name:"Stop Process",command:'[<Set _="/Process/Program/Mode" value="Stop" ver="v"/>]',category:"Testing"},{name:"Set TestMode",command:'[<Set _="/Process/Program/Mode" value="Test" ver="v"/>]',category:"Testing"},{name:"Test Scheduler",command:'[<ScheduleTest _="" max="100" ver="v"/>]',category:"Testing"},{name:"Test Sequencer",command:'[<SequenceTest _="" max="100" ver="v"/>]',category:"Testing"},{name:"ScanWLAN",command:'[<ScanWLAN ver="v"/>]',category:"Testing"},{name:"Query Inputs Hutline",command:'[<Get _="/Process/MB/IO/I/" ver="v"/>]',category:"I/O and PLC"},{name:"Query Outputs Hutline",command:'[<Get _="/Process/MB/IO/Q/" ver="v"/>]',category:"I/O and PLC"},{name:"Query Analog Input Hutline",command:'[<Get _="/Process/MB/A/AI/P0" ver="v"/>]',category:"I/O and PLC"},{name:"Set Output Hutline",command:'[<Set _="/Process/MB/IO/Q/P0" value="1" ver="v"/>]',category:"I/O and PLC"},{name:"Set SignalLED",command:'[<Set _="/Process/MB/SignalLED" value="1" ver="v"/>]',category:"I/O and PLC"},{name:"Query Stations Bus",command:'[<Get _="/Process/Bus1/" ver="v"/>]',category:"I/O and PLC"},{name:"Query ProcessVars",command:'[<Get _="/Process/PV/" ver="v"/>]',category:"I/O and PLC"},{name:"Set Variable Bus",command:'[<Set _="/Process/Bus1/Device_0/Variable_0" value="1" ver="v"/>]',category:"I/O and PLC"},{name:"Set Variable PV",command:'[<Set _="/Process/PV/Variable" value="1" ver="v"/>]',category:"I/O and PLC"},{name:"Scan M-Bus",command:'[<ScanDevices _="COM3" protocol="meterbus" ver="v"/>]',category:"I/O and PLC"}]},t.default_AT={name:"Default AT Commands",syntax:"AT",templates:[{name:"Display selected roaming network",command:"AT+CMI;"},{name:"Display selected roaming network",command:"AT+CMI;"}]},t["J2ME-Agent"]={name:"J2ME commands",syntax:"AT",templates:[{name:"Get Cinterion information",command:"ati",category:"Device info"},{name:"Get detailed Cinterion information",command:"ati1",category:"Device info"},{name:"Get power supply voltage",command:"at^sbv",category:"Device info"},{name:"Set configuration parameter",command:"at^scfg=<parameter>,<values>",category:"Config"},{name:"Set AT command error messaging",command:"at+cmee=<errorMode>",category:"Config"},{name:"Get supported serial baud rates",command:"at+ipr=?",category:"Serial"},{name:"Get serial baud rate",command:"at+ipr?",category:"Serial"},{name:"Set serial baud rate",command:"AT+IPR=<baudrate>",category:"Serial"}]},t.M2MinaBox={name:"SRT 360i Sample Commands",syntax:"SRT#",templates:[{name:"Switch motion detector on",command:"#C10*<nn>:0IAM1",category:"Motion detector"},{name:"Switch motion detector off",command:"#C10*<nn>:0IAM0",category:"Motion detector"},{name:"Switch vibration detector on",command:"#C10*<nn>:0VAM1",category:"Vibration detector"},{name:"Switch vibration detector off",command:"#C10*<nn>:0VAM0",category:"Vibration detector"},{name:"Switch sound detector on",command:"#C10*<nn>:0SAM1",category:"Sound detector"},{name:"Switch sound detector off",command:"#C10*<nn>:0SAM0",category:"Sound detector"}]},t["POSIX Agent"]={name:"NTC commands",syntax:"NTC",templates:[{name:"Get command template",command:"get <parameter>",category:"Template"},{name:"Set command template",command:"set <parameter>=<value>",category:"Template"},{name:"Execute command template",command:"execute <command>",category:"Template"},{name:"Get firmware and hardware version",command:"get sw.version; get hw.version",category:"Device"},{name:"Get Device Serial Number",command:"get uboot.sn",category:"Device"},{name:"Get current receiver number",command:"get service.cumulocity.sms.receiver",category:"SMS"},{name:"Set receiver number for SMS mode",command:"set service.cumulocity.sms.receiver=<number>",category:"SMS"},{name:"Get GPIO notify mode",command:"get service.cumulocity.gpio.<N>.notify",category:"GPIO"},{name:"Set GPIO notify mode",command:"set service.cumulocity.gpio.<N>.notify=<alarm|measurement>",category:"GPIO"},{name:"Configure debouncing interval for GPIO <N> [seconds]",command:"set service.cumulocity.gpio.<N>.debounce.interval=<number>",category:"Alarm"},{name:"Configure debouncing alarm text",command:"set service.cumulocity.gpio.<N>.alarm.text=<text>",category:"Alarm"},{name:"Configure interval for status report in SMS mode [seconds]",command:"set service.cumulocity.sms.report.interval=<number>",category:"SMS"},{name:"Cycle data connection status",command:"execute pdpcycle",category:"Connection"},{name:"Reboot device",command:"execute reboot",category:"Device"},{name:"Factory reset",command:"set service.system.factory=1",category:"Device"},{name:"Get power source and voltage",command:"get sys.sensors.info.powersource; get sys.sensors.io.vin.adc",category:"Device"},{name:"Get sim pin",command:"get wwan.0.sim.pin",category:"Cellular WAN"},{name:"Set sim pin",command:"set wwan.0.sim.pin=<pin>",category:"Cellular WAN"},{name:"Get sim protection",command:"get wwan.0.sim.status.pin_enabled",category:"Cellular WAN"},{name:"Set sim protection",command:"set wwan.0.sim.status.pin_enabled=<0 or 1>",category:"Cellular WAN"},{name:"Get reconnect delay [seconds]",command:"get link.profile.x.reconnect_delay",category:"WAN Profile"},{name:"Set reconnect delay [seconds]",command:"set link.profile.<x>.reconnect_delay=<delay>",category:"WAN Profile"},{name:"Get reconnect retries",command:"get link.profile.<x>.reconnect_retries",category:"WAN Profile"},{name:"Set reconnect retries",command:"set link.profile.<x>.reconnect_retries=<retries>",category:"WAN Profile"},{name:"Get Metric",command:"get link.profile.<x>.defaultmetric",category:"WAN Profile"},{name:"Set Metric",command:"set link.profile.<x>.defaultmetric=<metric>",category:"WAN Profile"},{name:"Get MTU",command:"get system.config.mtu",category:"WAN Profile"},{name:"Set MTU",command:"set system.config.mtu=<mtu>",category:"WAN Profile"},{name:"Get DHCP lease time [seconds]",command:"get service.dhcp.lease.0",category:"DHCP Server"},{name:"Set DHCP lease time [seconds]",command:"set service.dhcp.lease.0=<time>",category:"DHCP Server"},{name:"Get GPS enable",command:"get sensors.gps.0.enable",category:"GPS"},{name:"Set GPS enable",command:"set sensors.gps.0.enable=<1 or 0>",category:"GPS"},{name:"Get pullup voltage [volts]",command:"get sys.sensors.iocfg.pull_up_voltage",category:"GPIO"},{name:"Set pullup voltage [volts]",command:"set sys.sensors.iocfg.pull_up_voltage=<3.3 or 8.2>",category:"GPIO"},{name:"Get I/O pin capability",command:"get sys.sensors.io.<x>.cap",category:"GPIO Pin"},{name:"Get I/O pin analogue input [volts]",command:"get sys.sensors.io.<x>.adc",category:"GPIO Pin"},{name:"Get I/O pin analogue raw voltage [volts]",command:"get sys.sensors.io.<x>.adc_raw",category:"GPIO Pin"},{name:"Get I/O pin scale",command:"get sys.sensors.io.<x>.scale",category:"GPIO Pin"},{name:"Set I/O pin scale",command:"set sys.sensors.io.<x>.scale=<scale>",category:"GPIO Pin"},{name:"Get I/O pin mode",command:"get sys.sensors.io.<x>.mode",category:"GPIO Pin"},{name:"Set I/O pin mode",command:"set sys.sensors.io.<x>.mode=<mode>",category:"GPIO Pin"},{name:"Get I/O pin digital input",command:"get sys.sensors.io.<x>.d_in",category:"GPIO Pin"},{name:"Get I/O pin digital input threshold",command:"get sys.sensors.io.<x>.d_in_threshold",category:"GPIO Pin"},{name:"Get I/O pin hardware gain",command:"get sys.sensors.io.<x>.hardware_gain",category:"GPIO Pin"},{name:"Set I/O pin hardware gain",command:"set sys.sensors.io.<x>.hardware_gain=<gain>",category:"GPIO Pin"},{name:"Get agent status",command:"get service.cumulocity.agent.status",category:"Agent config"},{name:"Get agent connection sever",command:"get service.cumulocity.connection.server",category:"Agent config"},{name:"Set agent connection sever",command:"set service.cumulocity.connection.server=<server>",category:"Agent config"},{name:"Get agent enable",command:"get service.cumulocity.enable",category:"Agent config"},{name:"Set agent enable",command:"set service.cumulocity.enable=<0 or 1>",category:"Agent config"},{name:"Get agent log level",command:"get service.cumulocity.log.level",category:"Agent config"},{name:"Set agent log level",command:"set service.cumulocity.log.level=<1 ... 8>",category:"Agent config"},{name:"Get agent connection timeout [seconds]",command:"get service.cumulocity.network.connectTimeout",category:"Agent config"},{name:"Set agent connection timeout [seconds]",command:"set service.cumulocity.network.connectTimeout=<time>",category:"Agent config"},{name:"Get agent reconnect interval [seconds]",command:"get service.cumulocity.network.reconnectInterval",category:"Agent config"},{name:"Set agent reconnect interval [seconds]",command:"set service.cumulocity.network.reconnectInterval=<time>",category:"Agent config"},{name:"Get agent network timeout [seconds]",command:"get service.cumulocity.network.timeout",category:"Agent config"},{name:"Set agent network timeout [seconds]",command:"set service.cumulocity.network.timeout=<time>",category:"Agent config"},{name:"Get agent modbus port",command:"get service.cumulocity.plugin.lua__modbus.port",category:"Agent config"},{name:"Set agent modbus port",command:"set service.cumulocity.plugin.lua__modbus.port=<port>",category:"Agent config"},{name:"Get agent signal strength measurement interval [seconds]",command:"get service.cumulocity.plugin.lua__signal.interval",category:"Agent config"},{name:"Set agent signal strength measurement interval [seconds]",command:"set service.cumulocity.plugin.lua__signal.interval=<interval>",category:"Agent config"},{name:"Get agent GPIO interval [seconds]",command:"get service.cumulocity.plugin.ntc6200.gpio.interval",category:"Agent config"},{name:"Set agent GPIO interval [seconds]",command:"set service.cumulocity.plugin.ntc6200.gpio.interval=<interval>",category:"Agent config"},{name:"Get agent GPS interval [seconds]",command:"get service.cumulocity.plugin.ntc6200.gps.interval",category:"Agent config"},{name:"Set agent GPS interval [seconds]",command:"set service.cumulocity.plugin.ntc6200.gps.interval=<interval>",category:"Agent config"},{name:"Get serial port mode",command:"get serial.iomode.default",category:"Modbus-RTU config"},{name:"Set serial port mode",command:"set serial.iomode.default=<rs232|rs422|rs485>",category:"Modbus-RTU config"},{name:"Get network update interval [seconds]",command:"get service.cumulocity.plugin.ntc6200.network.update_interval",category:"Agent config"},{name:"Set network update interval [seconds]",command:"set service.cumulocity.plugin.ntc6200.network.update_interval=<interval>",category:"Agent config"},{name:"Get system resources measurement interval [seconds]",command:"get service.cumulocity.plugin.system_resources.interval",category:"Agent config"},{name:"Set system resources measurement interval [seconds]",command:"set service.cumulocity.plugin.system_resources.interval=<interval>",category:"Agent config"},{name:"Clear device credentials",command:"set service.cumulocity.connection.username=; set service.cumulocity.connection.password=",category:"Agent config"},{name:"Get device user",command:"get service.cumulocity.connection.username",category:"Agent config"}]},t.srt_360i={name:"SRT 360i Sample Commands",syntax:"SRT#",templates:[{name:"Switch motion detector on",command:"#C10*<nn>:0IAM1",category:"Motion detector"},{name:"Switch motion detector off",command:"#C10*<nn>:0IAM0",category:"Motion detector"},{name:"Switch vibration detector on",command:"#C10*<nn>:0VAM1",category:"Vibration detector"},{name:"Switch vibration detector off",command:"#C10*<nn>:0VAM0",category:"Vibration detector"},{name:"Switch sound detector on",command:"#C10*<nn>:0SAM1",category:"Sound detector"},{name:"Switch sound detector off",command:"#C10*<nn>:0SAM0",category:"Sound detector"}]},t=a.properties=a.properties||{},t.alarms={id:"c8ySchema",title:"Alarms",type:"object",printFormat:"hidden",properties:{id:{title:"ID",type:"string",readonly:!0},creationTime:{title:"Creation time",type:"string",format:"datetime"},type:{title:"Type",type:"string"},time:{title:"Time",type:"string",format:"datetime"},text:{title:"Text",type:"string"},status:{title:"Status",type:"string",enum:["ACTIVE","ACKNOWLEDGED","CLEARED"]},severity:{title:"Severity",type:"string",enum:["CRITICAL","MAJOR","MINOR","WARNING"]},source:{title:"Source",type:"integer"},count:{title:"Reoccurrence count",type:"number"},DEVICE_NAME:{title:"Device name",type:"String"}}},t.events={id:"c8ySchema",title:"Events",type:"object",printFormat:"hidden",properties:{id:{title:"ID",type:"string",readonly:!0},creationTime:{title:"Creation time",type:"string",format:"datetime"},type:{title:"Type",type:"string"},time:{title:"Time",type:"string",format:"datetime"},text:{title:"Text",type:"string"},source:{title:"Source",type:"integer"},DEVICE_NAME:{title:"Device name",type:"String"}}},t["managed-objects"]={id:"c8ySchema",title:"Managed object",type:"object",printFormat:"hidden",properties:{id:{title:"ID",type:"string",readonly:!0},name:{title:"Name",type:"string"},type:{title:"Type",type:"string"},owner:{title:"Owner",type:"string"},lastUpdated:{title:"Last updated",type:"string",printFormat:"datetime"},c8y_ActiveAlarmsStatus:{title:"Active alarms status",type:"object",printFormat:"hidden",properties:{critical:{title:"Critical",type:"number",readonly:!0},major:{title:"Major",type:"number",readonly:!0},minor:{title:"Minor",type:"number",readonly:!0},warning:{title:"Warning",type:"number",readonly:!0}}},c8y_Address:{title:"Address",type:"object",printFormat:"hidden",properties:{street:{title:"Street",type:"string"},city:{title:"City",type:"string"},cityCode:{title:"City code",type:"string"},territory:{title:"Territory",type:"string"},region:{title:"Region",type:"string"},country:{title:"Country",type:"string"}}},c8y_Availability:{title:"Availability",type:"object",printFormat:"hidden",properties:{status:{title:"Status",type:"string",readonly:!0},lastMessage:{title:"Last message",type:"string",printFormat:"datetime",readonly:!0}}},c8y_Connection:{title:"Connection",type:"object",printFormat:"hidden",properties:{status:{title:"Status",type:"string",readonly:!0}}},c8y_CommunicationMode:{title:"Communication mode",type:"object",printFormat:"hidden",properties:{mode:{title:"Mode",type:"string"}}},c8y_Firmware:{title:"Firmware",type:"object",printFormat:"hidden",readonly:!0,properties:{name:{title:"Name",type:"string"},version:{title:"Version",type:"string"},url:{title:"URL",type:"string"}}},c8y_Hardware:{title:"Hardware",type:"object",printFormat:"hidden",properties:{model:{title:"Model",type:"string"},serialNumber:{title:"Serial number",type:"string"},revision:{title:"Revision",type:"string"}}},c8y_Mobile:{title:"Mobile",type:"object",printFormat:"hidden",properties:{cellId:{title:"Cell ID",type:"string"},iccid:{title:"ICCID",type:"string"},imei:{title:"IMEI",type:"string"},imsi:{title:"IMSI",type:"string"},lac:{title:"LAC",type:"string"},mcc:{title:"MCC",type:"string"},mnc:{title:"MNC",type:"string"},msisdn:{title:"MSISDN",type:"string"}}},c8y_Network:{title:"Network",type:"object",printFormat:"hidden",properties:{c8y_DHCP:{title:"DHCP",type:"object",printFormat:"hidden",properties:{addressRange:{title:"Address range",type:"object",printFormat:"hidden",properties:{start:{title:"Start",type:"string"},end:{title:"End",type:"string"}}},dns1:{title:"DNS 1",type:"string"},dns2:{title:"DNS 2",type:"string"},enabled:{title:"Enabled",type:"integer"}}},c8y_LAN:{title:"LAN",type:"object",printFormat:"hidden",properties:{enabled:{title:"Enabled",type:"integer"},ip:{title:"IP",type:"string"},mac:{title:"MAC",type:"string"},name:{title:"Name",type:"string"},netmask:{title:"Netmask",type:"string"}}},c8y_WAN:{title:"WAN",type:"object",printFormat:"hidden",properties:{apn:{title:"APN",type:"integer"},authType:{title:"Auth type",type:"string"},password:{title:"Password",type:"string"},simStatus:{title:"SIM status",type:"string"},username:{title:"Username",type:"string"}}}}},c8y_Notes:{title:"Notes",type:"string","x-schema-form":{type:"textarea"}},creationTime:{title:"Creation time",type:"string",printFormat:"datetime",readonly:!0},c8y_Position:{title:"Position",type:"object",printFormat:"hidden",properties:{lng:{title:"Longitude",type:"number"},lat:{title:"Latitude",type:"number"},alt:{title:"Altitude",type:"number"}}},c8y_RequiredAvailability:{title:"Required availability",type:"object",printFormat:"hidden",properties:{responseInterval:{title:"Response interval",type:"integer"}}},c8y_Software:{title:"Software",type:"object",printFormat:"hidden",readonly:!0,properties:{name:{title:"Name",type:"string"},version:{title:"Version",type:"string"},url:{title:"URL",type:"string"}}},alarmCountToday:{title:"Alarm count today",type:"number",readonly:!0,computed:!0,config:{type:"object",properties:{type:{title:"Alarm type",type:"string"}}}},alarmCount3Months:{title:"Alarm count 3 months",type:"number",readonly:!0,computed:!0,config:{type:"object",properties:{type:{title:"Alarm type",type:"string"}}}},eventCountToday:{title:"Event count today",type:"number",readonly:!0,computed:!0,config:{type:"object",properties:{type:{title:"Event type",type:"string"}}}},eventCount3Months:{title:"Event count 3 months",type:"number",readonly:!0,computed:!0,config:{type:"object",properties:{type:{title:"Event type",type:"string"}}}},lastDeviceMessage:{title:"Last device message",type:"string",printFormat:"datetime",readonly:!0,computed:!0},lastMeasurement:{title:"Last measurement",type:"string",readonly:!0,computed:!0,config:!0},childDevicesCount:{title:"Number of child devices",type:"number",readonly:!0,computed:!0},childAssetsCount:{title:"Number of child assets",type:"number",readonly:!0,computed:!0},configurationSnapshot:{title:"Configuration snapshot",type:"string",readonly:!0,computed:!0}}},t.measurements={id:"c8ySchema",title:"Measurements",type:"object",printFormat:"hidden",properties:{id:{title:"ID",type:"string",readonly:!0},source:{title:"Source",type:"integer"},type:{title:"Type",type:"string"},time:{title:"Time",type:"string",format:"datetime"},DEVICE_NAME:{title:"Device name",type:"String"}}},t=a.devicetypes=a.devicetypes||{},t["Demo_1.0"]={name:"Demo model",description:"Sample device model",category:"Demo",minFieldbusUI:4,fieldbusType:"modbus",id:"Demo_1.0",_item:{c8y_ModbusDeviceTypeInfo:{name:"Demo model",description:"Sample device model",category:"Demo",minFieldbusUI:4,fieldbusType:"modbus"},c8y_Coils:[{input:!1,category:"Status",name:"Master switch",statusMapping:{status:"write"},number:1,enumValues:{0:"Off",1:"On"}},{input:!0,category:"Status",alarmMapping:{text:"Door opened",severity:"MINOR",type:"c8y_DoorStatus"},eventMapping:{text:"Door status changed",type:"c8y_DoorStatus"},name:"Door sensor",statusMapping:{status:"read"},number:2,enumValues:{0:"Closed",1:"Open"}}],c8y_Registers:[{signed:!1,number:1,divisor:1,multiplier:1,decimalPlaces:0,unit:"",startBit:0,input:!1,category:"Status",name:"Mode",statusMapping:{status:"write"},noBits:8,enumValues:{0:"Off",1:"Automatic",2:"Manual",3:"Maintenance"}},{signed:!1,measurementMapping:{series:"Pressure",type:"c8y_Process"},number:1,divisor:10,multiplier:1,decimalPlaces:0,unit:"mbar",startBit:0,input:!0,category:"Process data",statusMapping:{status:"read"},name:"Pressure",noBits:16},{signed:!0,measurementMapping:{series:"Temperature",type:"c8y_Process"},number:2,divisor:1,multiplier:1,decimalPlaces:2,unit:"C",startBit:0,input:!0,category:"Process data",statusMapping:{status:"read"},name:"Temperature",noBits:16}]}},t.Windmill_PLC={name:"Windmill PLC",minFieldbusUI:4,fieldbusType:"modbus",id:"Windmill_PLC",_item:{c8y_ModbusDeviceTypeInfo:{name:"Windmill PLC",minFieldbusUI:4,fieldbusType:"modbus"},c8y_Coils:[],c8y_Registers:[{min:1,max:3,signed:!1,number:2,divisor:1,multiplier:1,decimalPlaces:0,unit:"",category:"Windmill #1",startBit:0,input:!1,name:"Mode #1",statusMapping:{status:"write"},noBits:16,enumValues:{1:"Off",2:"Manual",3:"Random"}},{min:0,max:100,signed:!1,number:3,divisor:1,multiplier:1,decimalPlaces:0,unit:"",input:!1,startBit:0,category:"Windmill #1",name:"Speed Setpoint #1",statusMapping:{status:"write"},noBits:16},{min:0,max:100,signed:!1,measurementMapping:{series:"Windmill 1",type:"c8y_WindmillSpeed"},number:4,divisor:1,multiplier:1,decimalPlaces:0,unit:"",startBit:0,input:!1,category:"Windmill #1",name:"Actual Speed #1",statusMapping:{status:"read"},noBits:16},{min:1,max:3,signed:!1,number:5,divisor:1,multiplier:1,decimalPlaces:0,unit:"",category:"Windmill #2",startBit:0,input:!1,name:"Mode #2",statusMapping:{status:"write"},noBits:16,enumValues:{1:"Off",2:"Manual",3:"Random"}},{min:0,max:100,signed:!1,number:6,divisor:1,multiplier:1,decimalPlaces:0,unit:"",input:!1,startBit:0,category:"Windmill #2",name:"Speed Setpoint #2",statusMapping:{status:"write"},noBits:16},{min:0,max:100,signed:!1,measurementMapping:{series:"Windmill 2",type:"c8y_WindmillSpeed"},number:7,divisor:1,multiplier:1,decimalPlaces:0,unit:"",startBit:0,input:!1,category:"Windmill #2",name:"Actual Speed #2",statusMapping:{status:"read"},noBits:16},{min:1,max:3,signed:!1,number:8,divisor:1,multiplier:1,decimalPlaces:0,unit:"",category:"Windmill #3",startBit:0,input:!1,name:"Mode #3",statusMapping:{status:"write"},noBits:16,enumValues:{1:"Off",2:"Manual",3:"Random"}},{min:0,max:100,signed:!1,number:9,divisor:1,multiplier:1,decimalPlaces:0,unit:"",input:!1,startBit:0,category:"Windmill #3",name:"Speed Setpoint #3",statusMapping:{status:"write"},noBits:16},{min:0,max:100,signed:!1,measurementMapping:{series:"Windmill 3",type:"c8y_WindmillSpeed"},number:10,divisor:1,multiplier:1,decimalPlaces:0,unit:"",startBit:0,input:!1,category:"Windmill #3",name:"Actual Speed #3",statusMapping:{status:"read"},noBits:16}]}},t=a.smartrules=a.smartrules||{},t.onAlarmSendSms={name:"onAlarmSendSms",label:{input:"On alarm",output:"send SMS"},description:"When alarm is received then SMS is sent",category:"Alarms",contexts:{inputAlarm:{type:"config.alarmType"}},paramGroups:{input:{label:"On alarm matching:",icon:"bell",params:[{label:"Alarm type",property:"alarmType",required:!0,type:"alarmTypeMultiple"}]},output:{label:"Send SMS:",icon:"mobile",params:[{label:"Phone number",property:"to",required:!0,type:"text"},{label:"Message",property:"text",required:!0,type:"textarea",default:"Alarm occurred",warnMaxLength:160}]}},cepModule:{file:"smsOnAlarm.epl",rule:'/* the id of MO with rule\'s configuration: ${ruleId}*/\n\n@Description("rule input")\n@Name("OnAlarmSendSms_Input")\ncreate schema OnAlarmSendSms_Input_${ruleId} (\n\talarm Alarm,\n\tstep integer,\n\trule Map\n);\n\n@Name("GetRuleConfiguration")\ninsert into OnAlarmSendSms_Input_${ruleId}\nselect\n\talarmCreated.alarm as alarm,\n\t(findManagedObjectById("${ruleId}")).getAttrs() as rule,\n\t0 as step\nfrom\n\tAlarmCreated alarmCreated;\n\ncreate schema InputData_1_${ruleId} (\n\talarm Alarm,\n\trule Map,\n\tstep integer\n);\n\n@Name("ValidateAlarm")\ninsert into InputData_1_${ruleId}\nselect\n\talarm as alarm,\n\trule as rule,\n\tstep as step\nfrom\n\tOnAlarmSendSms_Input_${ruleId}\nwhere\n\tnot inMaintenanceMode(alarm.source)\n\tand getString(rule, "config.alarmType").split(",").anyOf(v => alarm.type = v.trim())\n\tand (alarm.source.value in (getList(rule, "enabledSources"))\n\t\tor (getList(rule, "enabledSources") is null and alarm.source.value not in (getList(rule, "disabledSources"))));\n\ncreate schema InputData_${ruleId} (\n\talarm Alarm,\n\tsource ManagedObject,\n    to String,\n\ttext String,\n\tstep integer\n);\n\n@Name("AssembleDataFromConfiguration")\nexpression String js:ensureLength(text) [\n\ttext.substring(0,160);\n]\ninsert into InputData_${ruleId}\nselect\n\talarm as alarm,\n\tfindManagedObjectById(alarm.source.value) as source,\n\tgetString(rule, "config.to") as to,\n\tensureLength(getString(rule, "config.text")) as text,\n\tstep as step\nfrom\n\tInputData_1_${ruleId};\n\n@Name("SendSms")\ninsert into SendSms\nselect\n\treplaceAllPlaceholders(inputData.text, alarm) as text,\n\tinputData.to as receiver,\n\talarm.source.value as deviceId\nfrom\n\tInputData_${ruleId} inputData;\n'}},t.onAlarmSendEmail={name:"onAlarmSendEmail",label:{input:"On alarm",output:"send e-mail"},description:"When alarm is received then e-mail is sent",category:"Alarms",contexts:{inputAlarm:{type:"config.alarmType"},outputUser:{email:"config.to"}},paramGroups:{input:{label:"On alarm matching:",icon:"bell",params:[{label:"Alarm type",property:"alarmType",required:!0,type:"alarmTypeMultiple"}]},output:{label:"Send e-mail:",icon:"envelope",params:[{label:"Send to",property:"to",required:!0,type:"email"},{label:"Send CC to",property:"cc",required:!1,type:"email"},{label:"Send BCC to",property:"bcc",required:!1,type:"email"},{label:"Reply to",property:"replyTo",required:!1,type:"email"},{label:"Subject",property:"subject",required:!0,type:"text",default:"New #{severity} alarm from #{source.name}",tokens:{"#{text}":"Alarm's text","#{severity}":"Alarm's severity","#{source.name}":"Alarm's source name"}},{label:"Message",property:"text",required:!0,type:"textarea",default:'New #{severity} alarm has been received from #{source.name}. Alarm text is: "#{text}".',tokens:{"#{text}":"Alarm's text","#{severity}":"Alarm's severity","#{source.name}":"Alarm's source name"}}]}},cepModule:{file:"emailOnAlarm.epl",rule:'/* the id of MO with rule\'s configuration: ${ruleId}*/\n\ncreate schema InputData_0_${ruleId} (\n\talarm Alarm,\n\trule ManagedObject\n);\n\n@Name("GetRuleConfiguration")\ninsert into InputData_0_${ruleId}\nselect\n\talarmCreated.alarm as alarm,\n\tfindManagedObjectById("${ruleId}") as rule\nfrom\n\tAlarmCreated alarmCreated;\n\ncreate schema InputData_1_${ruleId} (\n\talarm Alarm,\n\trule ManagedObject\n);\n\n@Name("ValidateAlarm")\ninsert into InputData_1_${ruleId}\nselect\n\talarm as alarm,\n\trule as rule\nfrom\n\tInputData_0_${ruleId}\nwhere\n\tnot inMaintenanceMode(alarm.source)\n\tand getString(rule, "config.alarmType").split(",").anyOf(v => alarm.type = v.trim())\n\tand (alarm.source.value in (getList(rule, "enabledSources"))\n\t\tor (getList(rule, "enabledSources") is null and alarm.source.value not in (getList(rule, "disabledSources"))));\n\ncreate schema InputData_${ruleId} (\n\talarm Alarm,\n\tsource ManagedObject,\n\treplyTo String,\n    to String,\n    cc String,\n    bcc String,\n\tsubject String,\n\ttext String\n);\n\n@Name("AssembleDataFromConfiguration")\ninsert into InputData_${ruleId}\nselect\n\talarm as alarm,\n\tfindManagedObjectById(alarm.source.value) as source,\n\tgetString(rule, "config.replyTo") as replyTo,\n\tgetString(rule, "config.to") as to,\n\tgetString(rule, "config.cc") as cc,\n\tgetString(rule, "config.bcc") as bcc,\n\tgetString(rule, "config.subject") as subject,\n\tgetString(rule, "config.text") as text\nfrom\n\tInputData_1_${ruleId};\n\n@Name("SendEmail")\ninsert into SendEmail\nselect\n\treplaceAllPlaceholders(inputData.subject, alarm) as subject,\n\treplaceAllPlaceholders(inputData.text, alarm) as text,\n\tinputData.replyTo as replyTo,\n\tinputData.to as receiver,\n\tinputData.cc as cc,\n\tinputData.bcc as bcc\nfrom\n\tInputData_${ruleId} inputData;\n'}},t.onAlarmEscalateAlarm={name:"onAlarmEscalateAlarm",label:{input:"On alarm",output:"escalate it"},description:"Escalate alarm",category:"Alarms",contexts:{inputAlarm:{type:"config.alarmType"}},paramGroups:{input:{label:"On alarm matching:",icon:"bell",colWidth:"5",params:[{label:"Alarm type",property:"alarmType",required:!0,type:"alarmTypeMultiple"}]},output:{label:"Escalate as follows:",icon:"list",colWidth:"7",params:[{label:"Escalation steps",property:"subrules",type:"escalationSteps",required:!0,stepTypes:[{label:"e-mail",icon:"envelope",failable:!1,associatedRuleTemplateName:"onAlarmSendEmail"
},{label:"SMS",icon:"mobile",failable:!1,associatedRuleTemplateName:"onAlarmSendSms"},{label:"Phone",icon:"phone",failable:!0,associatedRuleTemplateName:"onAlarmTextToSpeechCall"}]}]}},cepModule:{files:["escalation/step_email_on_alarm.epl","escalation/step_sms_on_alarm.epl","escalation/step_t2s_on_alarm.epl","escalation/steps_dispatcher.epl"],rule:'/**\n * Expected rule format:\n *\n {\n    "to",\n    "text",\n    "subject\n }\n */\n\n@Description("rule input")\n@Name("email_on_alarm_input")\n@Resilient\ncreate schema Email_On_Alarm_Input_${ruleId} (\n\talarm Alarm,\n\tstep integer,\n\trule Map\n);\n\n@Description("rule output")\n@Name("email_on_alarm_output")\n@Resilient\ncreate schema Email_On_Alarm_Output_${ruleId} (\n\talarm Alarm,\n\tstep integer,\n\tsuccess boolean\n);\n\n@Resilient\ncreate schema Email_InputData_1_${ruleId} (\n\talarm Alarm,\n\tstep integer,\n\trule Map\n);\n\n@Name("email_on_alarm_start")\n@Resilient\ninsert into Email_InputData_1_${ruleId}\nselect\n\talarm as alarm,\n\trule as rule,\n\tstep as step\nfrom\n\tEmail_On_Alarm_Input_${ruleId};\n\n@Resilient\ncreate schema Email_InputData_${ruleId} (\n\talarm Alarm,\n\tsource ManagedObject,\n\treplyTo String,\n    to String,\n    cc String,\n    bcc String,\n\tsubject String,\n\ttext String,\n\tstep integer\n);\n\n@Resilient\ninsert into Email_InputData_${ruleId}\nselect\n\talarm as alarm,\n\tfindManagedObjectById(alarm.source.value) as source,\n\tgetString(rule, "replyTo") as replyTo,\n\tgetString(rule, "to") as to,\n\tgetString(rule, "cc") as cc,\n\tgetString(rule, "bcc") as bcc,\n\tgetString(rule, "subject") as subject,\n\tgetString(rule, "text") as text,\n\tstep as step\nfrom\n\tEmail_InputData_1_${ruleId};\n\n@Name("SendEmail")\n@Resilient\ninsert into SendEmail\nselect\n\treplaceAllPlaceholders(inputData.subject, alarm) as subject,\n\treplaceAllPlaceholders(inputData.text, alarm) as text,\n\tinputData.replyTo as replyTo,\n\tinputData.to as receiver,\n\tinputData.cc as cc,\n\tinputData.bcc as bcc\nfrom\n\tEmail_InputData_${ruleId} inputData;\n\n@Name("prepare_email_on_alarm_output")\n@Resilient\ninsert into Email_On_Alarm_Output_${ruleId}\nselect\n\talarm as alarm,\n\ttrue as success,\n\tstep as step\nfrom\n\tEmail_InputData_${ruleId} inputData;\n\n/**\n * Expected rule format:\n *\n {\n    "to": "+48 543 43 322",\n    "text": "New #{severity} alarm has been received from #{source.name}. Alarm text is: \\"#{text}\\"."\n }\n */\n\n@Description("rule input")\n@Name("sms_on_alarm_input")\n@Resilient\ncreate schema Sms_On_Alarm_Input_${ruleId} (\n\talarm Alarm,\n\tstep integer,\n\trule Map\n);\n\n@Description("rule output")\n@Name("sms_on_alarm_output")\n@Resilient\ncreate schema Sms_On_Alarm_Output_${ruleId} (\n\talarm Alarm,\n\tstep integer,\n\tsuccess boolean\n);\n\n@Resilient\ncreate schema SMS_InputData_1_${ruleId} (\n\talarm Alarm,\n\trule Map,\n\tstep integer\n);\n\n@Name("sms_on_alarm_start")\n@Resilient\ninsert into SMS_InputData_1_${ruleId}\nselect\n\talarm as alarm,\n\trule as rule,\n\tstep as step\nfrom\n\tSms_On_Alarm_Input_${ruleId};\n\n@Resilient\ncreate schema SMS_InputData_${ruleId} (\n\talarm Alarm,\n\tsource ManagedObject,\n    to String,\n\ttext String,\n\tstep integer\n);\n\n@Resilient\nexpression String js:ensureLength(text) [\n\ttext.substring(0,160);\n]\ninsert into SMS_InputData_${ruleId}\nselect\n\talarm as alarm,\n\tfindManagedObjectById(alarm.source.value) as source,\n\tgetString(rule, "to") as to,\n\tensureLength(getString(rule, "text")) as text,\n\tstep as step\nfrom\n\tSMS_InputData_1_${ruleId};\n\n@Name("SendSMS")\n@Resilient\ninsert into SendSms\nselect\n\treplaceAllPlaceholders(inputData.text, alarm) as text,\n\tinputData.to as receiver,\n\talarm.source.value as deviceId\nfrom\n\tSMS_InputData_${ruleId} inputData;\n\n@Name("prepare_sms_on_alarm_output")\n@Resilient\ninsert into Sms_On_Alarm_Output_${ruleId}\nselect\n\talarm as alarm,\n\tstep as step,\n\ttrue as success\nfrom\n\tSMS_InputData_${ruleId} inputData;\n\ncreate variable string log_event_type_${ruleId} = "c8y_SpeechLog";\n\n@Description("rule input")\n@Name("t2s_on_alarm_Input")\n@Resilient\ncreate schema T2S_On_Alarm_Input_${ruleId} (\n\talarm Alarm,\n\trule Map,\n\tstep integer\n);\n\n@Resilient\ncreate schema SpeechLog_${ruleId} (\n\talarmId String,\n\tstatus String\n);\n\n@Priority(0)\n@Resilient\ncreate context AlarmContext_${ruleId}\n  initiated by distinct(alarm.id.value) T2S_On_Alarm_Input_${ruleId} as alarmEvent\n  terminated by SpeechLog_${ruleId}(alarmId = alarmEvent.alarm.id.value);\n\n@Description("rule output")\n@Name("t2s_on_alarm_output")\n@Resilient\ncreate schema T2S_On_Alarm_Output_${ruleId} (\n\talarm Alarm,\n\tsuccess boolean,\n\tstep integer\n);\n\n@Resilient\ncreate schema InputData_${ruleId} (\n\talarm Alarm,\n    phoneNumber String,\n    textToSpeech String,\n    attempts Number,\n    timeout Number,\n    questionText String,\n    acknowledgeButton Number\n);\n\n@Name("AssembleSpeechDataFromConfiguration")\n@Resilient\ninsert into InputData_${ruleId}\nselect\n\talarm as alarm,\n\tgetString(rule, "to") as phoneNumber,\n\tgetString(rule, "text") as textToSpeech,\n\tgetNumber(rule, "retries") as attempts,\n\tgetNumber(rule, "timeout") as timeout,\n\tgetString(rule, "acknowledgeText") as questionText,\n\tgetNumber(rule, "acknowledgeNumber") as acknowledgeButton\nfrom\n\tT2S_On_Alarm_Input_${ruleId};\n\n@Name("SendSpeech")\n@Resilient\ninsert into SendSpeech\nselect\n\tinputData.phoneNumber as phoneNumber,\n\treplaceAllPlaceholders(inputData.textToSpeech, inputData.alarm) as textToSpeech,\n\tinputData.alarm.source.value as deviceId,\n\tcast(inputData.attempts?, long) as attempts,\n\tcast(inputData.timeout?, long) as timeout,\n\tinputData.alarm.id.value as alarmId,\n\tinputData.questionText as questionText,\n\tcast(inputData.acknowledgeButton?, long) as acknowledgeButton\nfrom\n\tInputData_${ruleId} inputData;\n\n@Resilient\ninsert into SpeechLog_${ruleId}\nselect\n\tgetString(e, "alarmId") as alarmId,\n\tgetString(e, "status") as status\nfrom\n\tEventCreated e\nwhere\n\te.type = log_event_type_${ruleId};\n\n@Priority(1)\n@Name("handle Log Event")\n@Resilient\ncontext AlarmContext_${ruleId}\ninsert into T2S_On_Alarm_Output_${ruleId}\nselect\n\tcontext.alarmEvent.alarm as alarm,\n\tcontext.alarmEvent.step as step,\n\tgetString(e, "status") = "SUCCESSFUL" as success\nfrom SpeechLog_${ruleId} e;\n\n@Name("Rule_Var")\n@Durable\ncreate variable ManagedObject rule_${ruleId} = findManagedObjectById("${ruleId}");\n\n@Name("Steps_Var")\n@Durable\ncreate variable List steps_${ruleId} = getList(rule_${ruleId}, "config.subrules");\n\n@Name("Escalation_Input_0_Schema")\n@Resilient\ncreate schema Escalation_Input_0_${ruleId} (\n\talarm Alarm\n);\n\n@Name("Escalation_Input_0_Populate")\n@Resilient\ninsert into Escalation_Input_0_${ruleId}\nselect\n\talarmCreated.alarm as alarm\nfrom\n\tAlarmCreated alarmCreated;\n\n@Name("Escalation_Input_Schema")\n@Resilient\ncreate schema Escalation_Input_${ruleId} (\n\talarm Alarm\n);\n\n@Name("Escalation_Input_Populate")\n@Resilient\ninsert into Escalation_Input_${ruleId}\nselect\n\talarm as alarm\nfrom\n\tEscalation_Input_0_${ruleId}\nwhere\n\tnot inMaintenanceMode(alarm.source)\n\tand getString(rule_${ruleId}, "config.alarmType").split(",").anyOf(v => alarm.type = v.trim())\n\tand (alarm.source.value in (getList(rule_${ruleId}, "enabledSources"))\n\t\tor (getList(rule_${ruleId}, "enabledSources") is null and alarm.source.value not in (getList(rule_${ruleId}, "disabledSources"))));\n\n@Name("Alarm_Handler_Schema")\n@Resilient\ncreate schema AlarmHandler_${ruleId} (\n\talarm Alarm,\n\tstep int\n);\n\n@Name("Step_Output_Handler_Schema")\n@Resilient\ncreate schema StepOutputHandler_${ruleId} (\n\talarm Alarm,\n\tsuccess boolean,\n\tstep int,\n\tstepType String\n);\n\n@Name("Step_Input_0_Schema")\n@Resilient\ncreate schema StepInput_0_${ruleId} (\n\talarm Alarm,\n\tstep int\n);\n\n@Name("Step_Input_1_Schema")\n@Resilient\ncreate schema StepInput_1_${ruleId} (\n\talarm Alarm,\n\tstep int,\n\tstepConfig Map\n);\n\n@Name("Step_Input_2_Schema")\n@Resilient\ncreate schema StepInput_2_${ruleId} (\n\talarm Alarm,\n\tstep int,\n\tstepConfig Map,\n\tconditionPassed boolean\n);\n\n@Name("Step_Input_Schema")\n@Resilient\ncreate schema StepInput_${ruleId} (\n\talarm Alarm,\n\tstep int,\n\tstepConfig Map\n);\n\n@Name("Escalation_context_def")\n@Resilient\ncreate context Escalation_Context_${ruleId} partition by\n\talarm.id from Escalation_Input_${ruleId},\n\talarm.id from AlarmHandler_${ruleId},\n\talarm.id from StepInput_0_${ruleId},\n\talarm.id from StepInput_1_${ruleId},\n\talarm.id from StepInput_2_${ruleId},\n\talarm.id from StepInput_${ruleId},\n\talarm.id from StepOutputHandler_${ruleId};\n\n@Name("Alarm_Handler_Populate")\n@Resilient\ncontext Escalation_Context_${ruleId}\ninsert into AlarmHandler_${ruleId}\nselect\n\talarm as alarm,\n\t-1 as step\nfrom Escalation_Input_${ruleId};\n\n/**************************************************************************************/\n\n/**\n * Triggered by alarm\n */\n@Name("Handle_alarm")\n@Resilient\ncontext Escalation_Context_${ruleId}\ninsert into StepInput_0_${ruleId}\nselect\n\talarm as alarm,\n\tstep as step\nfrom AlarmHandler_${ruleId};\n\n/**\n * Triggered by step output\n */\n@Name("Handle_last_step_output")\n@Resilient\ncontext Escalation_Context_${ruleId}\ninsert into StepInput_0_${ruleId}\nselect\n\talarm as alarm,\n\tstep as step\nfrom StepOutputHandler_${ruleId};\n\n/**\n * Common processing: StepInput_0 -> StepInput_1\n */\n@Name("Increment_step")\n@Resilient\ncontext Escalation_Context_${ruleId}\ninsert into StepInput_1_${ruleId}\nselect\n\tinput.alarm as alarm,\n\tinput.step + 1 as step,\n\tcast(steps_${ruleId}.get(input.step + 1), java.util.Map) as stepConfig\nfrom StepInput_0_${ruleId} input\nwhere input.step + 1 < steps_${ruleId}.size();\n\n@Resilient\ncreate expression Map js:asStepLog_${ruleId}(type, success, stepConfig) [\n\timportClass (java.util.Map);\n\timportClass (java.util.HashMap);\n\tvar result  = new HashMap();\n\tresult.put("type", type);\n\tif(type === \'t2s\') {\n\t\tresult.put("success", success);\n\t};\n\tresult.put("to", stepConfig.get("to"))\n\tresult;\n];\n\n@Name("Finish_create_log")\n@Resilient\ncontext Escalation_Context_${ruleId}\ninsert into CreateEvent\nselect\n\t"c8y_EscalationLog" as type,\n\tinput.alarm.source as source,\n\tcurrent_timestamp().toDate() as time,\n\t"Escalation rule for alarm with id " || StepInput_0_${ruleId}.alarm.id.value || " processed." as text,\n\t{\n\t\t"steps",\n\t\t(select * from StepOutputHandler_${ruleId}.std:unique(step)).toMap(\n\t\t\tk => cast(k.step + 1, java.lang.String),\n\t\t\tv => asStepLog_${ruleId}(v.stepType, v.success, cast(steps_${ruleId}.get(v.step), java.util.Map))\n\t\t)\n\t} as fragments\nfrom StepInput_0_${ruleId} input\nwhere input.step + 1 >= steps_${ruleId}.size();\n\n/**\n * Common processing: StepInput_1 -> StepInput_2\n */\n@Name("Evaluate_condition")\n@Resilient\ncontext Escalation_Context_${ruleId}\ninsert into StepInput_2_${ruleId}\nselect\n\tinput.alarm as alarm,\n\tinput.step as step,\n\tinput.stepConfig as stepConfig,\n\tgetNumber(input.stepConfig, "ifFailed") is null\n\t\tor (select * from StepOutputHandler_${ruleId}.std:unique(step)).anyOf(\n\t\ti => i.step = getNumber(stepConfig, "ifFailed") and i.success = false) as conditionPassed\nfrom StepInput_1_${ruleId} input;\n\n/**\n * Common processing: StepInput_2 -> StepInput\n * (if transition condition passed)\n */\n@Name("Condition_passed")\n@Resilient\ncontext Escalation_Context_${ruleId}\ninsert into StepInput_${ruleId}\nselect\n\tinput.alarm as alarm,\n\tinput.step as step,\n\tinput.stepConfig as stepConfig\nfrom StepInput_2_${ruleId} input\nwhere input.conditionPassed = true;\n\n/**\n * Common processing: StepInput_2 -> StepInput_0\n * (if transition condition not passed)\n */\n@Name("Condition_not_passed")\n@Resilient\ncontext Escalation_Context_${ruleId}\ninsert into StepInput_0_${ruleId}\nselect\n\tinput.alarm as alarm,\n\tinput.step as step\nfrom StepInput_2_${ruleId} input\nwhere input.conditionPassed = false;\n\n/**************************************************************************************\n*\n* Send request to step and handle step response\n*\n*/\n\n/**\n * Email\n */\n@Name("call_email_step")\n@Resilient\ninsert into Email_On_Alarm_Input_${ruleId}\nselect\n\talarm as alarm,\n\tstep as step,\n\tstepConfig as rule\nfrom StepInput_${ruleId}\nwhere\n\tgetString(stepConfig, "ruleTemplateName") = "onAlarmSendEmail";\n\n@Name("call_email_step_response")\n@Resilient\ninsert into StepOutputHandler_${ruleId}\nselect\n\t*,\n\t"mail" as stepType\nfrom Email_On_Alarm_Output_${ruleId};\n\n/**\n * Sms\n */\n@Name("call_sms_step")\n@Resilient\ninsert into Sms_On_Alarm_Input_${ruleId}\nselect\n\talarm as alarm,\n\tstep as step,\n\tstepConfig as rule\nfrom StepInput_${ruleId}\nwhere\n\tgetString(stepConfig, "ruleTemplateName") = "onAlarmSendSms";\n\n@Name("call_sms_step_response")\n@Resilient\ninsert into StepOutputHandler_${ruleId}\nselect\n\t*,\n\t"sms" as stepType\nfrom Sms_On_Alarm_Output_${ruleId};\n\n/**\n * T2S\n */\n@Name("call_t2s_step")\n@Resilient\ninsert into T2S_On_Alarm_Input_${ruleId}\nselect\n\talarm as alarm,\n\tstep as step,\n\tstepConfig as rule\nfrom StepInput_${ruleId}\nwhere\n\tgetString(stepConfig, "ruleTemplateName") = "onAlarmTextToSpeechCall";\n\n@Name("call_t2s_step_response")\n@Resilient\ninsert into StepOutputHandler_${ruleId}\nselect\n\t*,\n\t"t2s" as stepType\nfrom T2S_On_Alarm_Output_${ruleId};\n'}},t.onAlarmDurationIncreaseAlarmSeverity={name:"onAlarmDurationIncreaseAlarmSeverity",label:{input:"On alarm duration",output:"increase severity"},description:"Increase alarm severity when active for too long",category:"Alarms",contexts:{inputAlarm:{type:"config.alarmType"}},paramGroups:{input:{label:"On alarm matching:",icon:"bell",params:[{label:"Alarm type",property:"alarmType",required:!0,type:"alarmTypeMultiple"},{label:"Alarm duration",property:"duration",required:!0,type:"timeInterval",default:3600,dontUseSeconds:!0}]},output:{label:"Increase alarm severity",icon:"bell",params:[]}},cepModule:{file:"onAlarmDurationChangeAlarmSeverity.epl",rule:'/* required parameters: duration, ruleId*/\n@Resilient\ncreate schema AlarmInput_0_${ruleId} (\n\talarm Alarm,\n\trule ManagedObject\n);\n\n\n@Resilient\ncreate schema AlarmInput_${ruleId} (\n\tid String,\n\tsource String,\n\tseverity Severity,\n\tstatus AlarmStatus,\n\tduration long,\n\tcreationTime Date\n);\n\n\n@Resilient\ncreate schema AlarmOutput_${ruleId} (\n\tid String,\n\tsource String,\n\tseverity Severity,\n\tstatus AlarmStatus,\n\tcreationTime Date\n);\n\n\n@Resilient\ncreate context AlarmDurationMonitoring_${ruleId}\n    context AlarmsWithGivenId partition by\n    \talarm.id.value from AlarmCreated,\n    \tid from AlarmInput_${ruleId},\n    \tid from AlarmOutput_${ruleId},\n    context ActiveAlarms\n        start AlarmCreated(status = CumulocityAlarmStatuses.ACTIVE)\n        end pattern[AlarmUpdated(status != CumulocityAlarmStatuses.ACTIVE) or AlarmOutput_${ruleId}(severity = CumulocitySeverities.CRITICAL)];\n\n@Resilient\n@Name("GetRuleConfiguration")\ninsert into\n\tAlarmInput_0_${ruleId}\nselect\n\talarmEvent.alarm as alarm,\n\tfindManagedObjectById("${ruleId}") as rule\nfrom\n\tAlarmComplexEvent alarmEvent;\n\n@Resilient\n@Name("ValidateAlarm")\ninsert into\n\tAlarmInput_${ruleId}\nselect\n\talarm.id.value as id,\n\talarm.source.value as source,\n\talarm.severity as severity,\n\talarm.status as status,\n\tcast(getNumber(rule, "config.duration"), long) as duration,\n\talarm.creationTime as creationTime\nfrom\n\tAlarmInput_0_${ruleId}\nwhere\n    getString(rule, "config.alarmType").split(",").anyOf(v => alarm.type = v.trim())\n\tand (alarm.source.value in (getList(rule, "enabledSources"))\n\t\tor (getList(rule, "enabledSources") is null and alarm.source.value not in (getList(rule, "disabledSources"))));\n\n\n@Resilient\ncreate schema LongDurationCandidate_${ruleId} (\n\tlastInput AlarmInput_${ruleId},\n\tlastOutput AlarmOutput_${ruleId}\n);\n\n\n@Resilient\ncreate expression CumulocitySeverities js:incOnDuration_${ruleId}(severity) [\n\timportClass (com.cumulocity.model.event.CumulocitySeverities);\n\tif(severity == CumulocitySeverities.WARNING) {\n\t\tCumulocitySeverities.MINOR;\n\t} else if(severity == CumulocitySeverities.MINOR) {\n\t\tCumulocitySeverities.MAJOR;\n\t} else if(severity == CumulocitySeverities.MAJOR) {\n\t\tCumulocitySeverities.CRITICAL;\n\t} else {\n\t\tseverity\n\t}\n];\n\n@Resilient\n@Name("CheckAlarmsEveryMinute")\ncontext AlarmDurationMonitoring_${ruleId}\ninsert into LongDurationCandidate_${ruleId}\nselect\n\t(select * from AlarmInput_${ruleId}.std:lastevent()) as lastInput,\n\t(select * from AlarmOutput_${ruleId}.std:lastevent()) as lastOutput\nfrom\n\tpattern [every timer:at(*, *, *, *, *, 0)];//every minute\n\n@Resilient\n@Name("ValidateDuration")\ninsert into AlarmOutput_${ruleId}\nselect\n\tlastInput.id as id,\n\tlastInput.status as status,\n\tincOnDuration_${ruleId}(coalesce(lastOutput?.severity, lastInput?.severity)) as severity,\n\tlastInput.source as source,\n\tcurrent_timestamp().toDate() as creationTime\nfrom LongDurationCandidate_${ruleId}\nwhere\n\tlastInput is not null\n\tand lastInput.creationTime.before(current_timestamp(), lastInput.duration seconds)\n\tand (\n\t\tlastOutput is null or\n\t\tlastOutput.creationTime.before(current_timestamp(), lastInput.duration seconds)\n\t);\n\n@Resilient\n@Name("UpdateAlarmSeverity")\ninsert into UpdateAlarm\nselect\n\ta.id as id,\n\ta.severity as severity\nfrom AlarmOutput_${ruleId} a;\n'}},t.onGeofenceCreateAlarm={name:"onGeofenceCreateAlarm",label:{input:"On geofence",output:"create alarm"},description:"On geofence create alarm",category:"Geofence",paramGroups:{input:{label:"On geofence violation:",icon:"map-marker",params:[{label:"Geofence",property:"geofence",required:!0,type:"geofence"}]},output:{label:"Create alarm:",icon:"bell",params:[{label:"Trigger on",property:"triggerAlarmOn",required:!0,type:"select",options:[{label:"On entering",value:"entering"},{label:"On leaving",value:"leaving"},{label:"On entering and leaving",value:"both"}],default:"leaving"},{label:"Type",property:"alarmType",required:!0,type:"alarmType",default:"c8y_GeofenceAlarm"},{label:"Severity",property:"alarmSeverity",required:!0,type:"alarmSeverity",default:"MAJOR"},{label:"Text",property:"alarmText",required:!0,type:"text",default:"Geofence violation"}]}},cepModule:{file:"geofencingRule.epl",rule:'/* the id of MO with rule\'s configuration: ${ruleId}*/\n@Resilient\ncreate schema GeofenceInputData_${ruleId} (\n\teventCreated EventCreated,\n\tconfig GeofenceRuleConfig,\n\tlat BigDecimal,\n\tlng BigDecimal\n);\n\n@Resilient\ncreate schema LocatedPosition_${ruleId} (\n    time Date,\n    source_id String,\n    inside_fence boolean,\n    config GeofenceRuleConfig\n);\n\n@Resilient\ncreate schema PositionPair_${ruleId} (\n\tfirstPos LocatedPosition_${ruleId},\n\tsecondPos LocatedPosition_${ruleId}\n);\n\n@Resilient\ncreate context LocationEventContext${ruleId}\n\tpartition by source_id from LocatedPosition_${ruleId};\n\n@Name("GetRuleConfiguration")\n@Resilient\ninsert into GeofenceInputData_${ruleId}\nselect\n    evt as eventCreated,\n    getGeofenceRuleConfig ("${ruleId}") as config,\n    getNumber(evt, "c8y_Position.lat") as lat,\n    getNumber(evt, "c8y_Position.lng") as lng\nfrom EventCreated as evt;\n\n@Name("ValidateEvent")\n@Resilient\ninsert into LocatedPosition_${ruleId}\nselect\n    inputData.eventCreated.event.time as time,\n    inputData.eventCreated.event.source.value as source_id,\n    inputData.config as config,\n    isInsideFence(\n        inputData.lat,\n        inputData.lng,\n        getList(inputData.config, "geofence")) as inside_fence\nfrom GeofenceInputData_${ruleId} as inputData\nwhere\n\tconfig is not null\n\tand config.isValid()\n\tand (\n\t\tinputData.eventCreated.event.source.value in (config.enabledSources)\n\t\tor (config.enabledSources is null and inputData.eventCreated.event.source.value not in (config.disabledSources))\n\t);\n\n@Name("TakeLastTwoPositionEvents")\n@Resilient\ncontext LocationEventContext${ruleId}\ninsert into PositionPair_${ruleId}\nselect\n\tfirst(*) as firstPos,\n\tlast(*) as secondPos\nfrom LocatedPosition_${ruleId}.win:length(2);\n\n@Name("CreateAlarm")\n@Resilient\ninsert into CreateAlarm\nselect\n    pair.firstPos.config.alarmType as type,\n    pair.firstPos.time as time,\n    pair.firstPos.config.alarmText as text,\n    pair.firstPos.source_id as source,\n    "ACTIVE" as status,\n    pair.firstPos.config.alarmSeverity as severity\nfrom PositionPair_${ruleId} as pair\nwhere (pair.secondPos.inside_fence = false) and (pair.firstPos.inside_fence = true)\nand (\n\tpair.firstPos.config.triggerAlarmOn is null\n\tor pair.firstPos.config.triggerAlarmOn = "leaving"\n\tor pair.firstPos.config.triggerAlarmOn = "both"\n);\n\n@Name("ClearAlarm")\n@Resilient\n@Priority(10)\ninsert into UpdateAlarm\nselect\n    findFirstAlarmBySourceAndStatusAndType(pair.firstPos.source_id, "ACTIVE", pair.firstPos.config.alarmType).getId().getValue() as id,\n    "Geofence alarm cleared" as text,\n    "CLEARED" as status\nfrom PositionPair_${ruleId} as pair\nwhere (pair.secondPos.inside_fence = true) and (pair.firstPos.inside_fence = false)\nand (\n\tpair.firstPos.config.triggerAlarmOn is null\n\tor pair.firstPos.config.triggerAlarmOn = "leaving"\n\tor pair.firstPos.config.triggerAlarmOn = "both"\n);\n\n@Name("CreateAlarmEntering")\n@Resilient\ninsert into CreateAlarm\nselect\n    pair.firstPos.config.alarmType as type,\n    pair.firstPos.time as time,\n    pair.firstPos.config.alarmText as text,\n    pair.firstPos.source_id as source,\n    "ACTIVE" as status,\n    pair.firstPos.config.alarmSeverity as severity\nfrom PositionPair_${ruleId} as pair\nwhere (pair.secondPos.inside_fence = true) and (pair.firstPos.inside_fence = false)\nand (\n\tpair.firstPos.config.triggerAlarmOn = "entering"\n\tor pair.firstPos.config.triggerAlarmOn = "both"\n);\n\n@Name("ClearAlarmEntering")\n@Resilient\n@Priority(10)\ninsert into UpdateAlarm\nselect\n    findFirstAlarmBySourceAndStatusAndType(pair.firstPos.source_id, "ACTIVE", pair.firstPos.config.alarmType).getId().getValue() as id,\n    "Geofence alarm cleared" as text,\n    "CLEARED" as status\nfrom PositionPair_${ruleId} as pair\nwhere (pair.secondPos.inside_fence = false) and (pair.firstPos.inside_fence = true)\nand (\n\tpair.firstPos.config.triggerAlarmOn = "entering"\n\tor pair.firstPos.config.triggerAlarmOn = "both"\n);'}},t.onGeofenceSendEmail={name:"onGeofenceSendEmail",label:{input:"On geofence",output:"send e-mail"},description:"On geofence send e-mail",category:"Geofence",contexts:{outputUser:{email:"config.to"}},paramGroups:{input:{label:"On geofence violation:",icon:"map-marker",params:[{label:"Geofence",property:"geofence",required:!0,type:"geofence"}]},output:{label:"Send e-mail:",icon:"envelope",params:[{label:"Send to",property:"to",required:!0,type:"email"},{label:"Send CC to",property:"cc",required:!1,type:"email"},{label:"Send BCC to",property:"bcc",required:!1,type:"email"},{label:"Reply to",property:"replyTo",required:!1,type:"email"},{label:"Subject",property:"subject",required:!0,type:"text",default:"New geofence violation from #{source.name}",tokens:{"#{source.name}":"Name of device that violated geofence"}},{label:"Message",property:"text",required:!0,type:"textarea",default:"New geofence violation from #{source.name}",tokens:{"#{source.name}":"Name of device that violated geofence"}}]}},cepModule:{file:"geofencingEmail.epl",rule:'/* the id of MO with rule\'s configuration: ${ruleId}*/\r\n\r\n@Resilient\r\ncreate schema GeofenceInputData_${ruleId} (\r\n\teventCreated EventCreated,\r\n\tconfig GeofenceRuleConfig,\r\n    rule ManagedObject,\r\n\tlat BigDecimal,\r\n\tlng BigDecimal\r\n);\r\n\r\n@Resilient\r\ncreate schema LocatedPosition_${ruleId} (\r\n    event Event,\r\n    source_id String,\r\n    inside_fence boolean,\r\n    config GeofenceRuleConfig,\r\n    rule ManagedObject\r\n);\r\n\r\n@Resilient\r\ncreate schema PositionPair_${ruleId} (\r\n\tfirstPos LocatedPosition_${ruleId},\r\n\tsecondPos LocatedPosition_${ruleId}\r\n);\r\n\r\n@Resilient\r\ncreate context LocationEventContext${ruleId}\r\n\tpartition by source_id from LocatedPosition_${ruleId};\r\n\r\n@Name("GetRuleConfiguration")\r\n@Resilient\r\ninsert into GeofenceInputData_${ruleId}\r\nselect\r\n    evt as eventCreated,\r\n    getGeofenceRuleConfig ("${ruleId}") as config,\r\n    findManagedObjectById("${ruleId}") as rule,\r\n    getNumber(evt, "c8y_Position.lat") as lat,\r\n    getNumber(evt, "c8y_Position.lng") as lng\r\nfrom EventCreated as evt;\r\n\r\n@Name("ValidateEvent")\r\n@Resilient\r\ninsert into LocatedPosition_${ruleId}\r\nselect\r\n    inputData.eventCreated.event as event,\r\n    inputData.eventCreated.event.source.value as source_id,\r\n    inputData.config as config,\r\n    inputData.rule as rule,\r\n    isInsideFence(\r\n        inputData.lat,\r\n        inputData.lng,\r\n        getList(inputData.config, "geofence")) as inside_fence\r\nfrom GeofenceInputData_${ruleId} as inputData\r\nwhere\r\n\tconfig is not null\r\n\tand (\r\n\t\tinputData.eventCreated.event.source.value in (config.enabledSources)\r\n\t\tor (config.enabledSources is null and inputData.eventCreated.event.source.value not in (config.disabledSources))\r\n\t);\r\n\r\n@Name("TakeLastTwoPositionEvents")\r\n@Resilient\r\ncontext LocationEventContext${ruleId}\r\ninsert into PositionPair_${ruleId}\r\nselect\r\n\tfirst(*) as firstPos,\r\n\tlast(*) as secondPos\r\nfrom LocatedPosition_${ruleId}.win:length(2);\r\n\r\n@Name("SendEmail")\r\n@Resilient\r\ninsert into SendEmail\r\nselect\r\n\treplaceAllPlaceholders(getString(pair.firstPos.rule, "config.subject"), pair.firstPos.event) as subject,\r\n\treplaceAllPlaceholders(getString(pair.firstPos.rule, "config.text"), pair.firstPos.event) as text,\r\n\tgetString(pair.firstPos.rule, "config.replyTo") as replyTo,\r\n\tgetString(pair.firstPos.rule, "config.to") as receiver,\r\n\tgetString(pair.firstPos.rule, "config.cc") as cc,\r\n\tgetString(pair.firstPos.rule, "config.bcc") as bcc\r\nfrom PositionPair_${ruleId} as pair\r\nwhere (pair.secondPos.inside_fence = false) and (pair.firstPos.inside_fence = true)\r\nand (\r\n\tpair.firstPos.config.triggerAlarmOn is null\r\n\tor pair.firstPos.config.triggerAlarmOn = "leaving"\r\n\tor pair.firstPos.config.triggerAlarmOn = "both"\r\n);\r\n\r\n@Name("SendEmailEntering")\r\n@Resilient\r\ninsert into SendEmail\r\nselect\r\n\treplaceAllPlaceholders(getString(pair.firstPos.rule, "config.subject"), pair.firstPos.event) as subject,\r\n\treplaceAllPlaceholders(getString(pair.firstPos.rule, "config.text"), pair.firstPos.event) as text,\r\n\tgetString(pair.firstPos.rule, "config.replyTo") as replyTo,\r\n\tgetString(pair.firstPos.rule, "config.to") as receiver,\r\n\tgetString(pair.firstPos.rule, "config.cc") as cc,\r\n\tgetString(pair.firstPos.rule, "config.bcc") as bcc\r\nfrom PositionPair_${ruleId} as pair\r\nwhere (pair.secondPos.inside_fence = true) and (pair.firstPos.inside_fence = false)\r\nand (\r\n\tpair.firstPos.config.triggerAlarmOn = "entering"\r\n\tor pair.firstPos.config.triggerAlarmOn = "both"\r\n);\r\n\r\n'}},t.calculateEnergyConsumption={name:"calculateEnergyConsumption",label:{input:"Calculate",output:"energy consumption"},description:"Calculates energy consumption",category:"Energy",contexts:{inputDataPoint:{fragment:"config.inputFragment",series:"config.inputSeries"}},paramGroups:{input:{label:"Monitored measurement:",icon:"tachometer",params:[{label:"Fragment",property:"inputFragment",required:!0,type:"text",default:"c8y_EnergyCounter"},{label:"Series",property:"inputSeries",required:!0,type:"text",default:"E"},{label:"Time interval",property:"timeInterval",required:!0,type:"timeInterval",default:3600}]},output:{label:"Energy consumption measurement:",icon:"bar-chart",params:[{label:"Fragment",property:"outputFragment",required:!0,type:"text",default:"c8y_EnergyConsumption"},{label:"Series",property:"outputSeries",required:!0,type:"text",default:"E"}]}},cepModule:{file:"consumption.epl",rule:'/* the id of MO with rule\'s configuration: ${ruleId}*/\n\n@Resilient\ncreate variable ManagedObject rule_${ruleId} = findManagedObjectById("${ruleId}");\n\n@Resilient\ncreate variable Long output_interval_${ruleId} = cast(getNumber(rule_${ruleId}, "config.timeInterval"), long);\n\n@Resilient\ncreate schema InputData_0_${ruleId} (\n    measurementCreated MeasurementCreated,\n    meterValue BigDecimal\n);\n\n@Resilient\ncreate schema InputData_${ruleId} (\n    measurementCreated MeasurementCreated,\n    meterValue BigDecimal,\n    timePoint Number\n);\n\n@Resilient\ncreate context DeviceMeasurements_${ruleId} partition by\n    measurementCreated.measurement.source.value, measurementCreated.measurement.type from InputData_${ruleId};\n\n@Name("ValidateMeasurement")\n@Resilient\ninsert into InputData_0_${ruleId}\nselect\n    measurementCreated as measurementCreated,\n    getNumber(measurementCreated.measurement, (getString(rule_${ruleId}, "config.inputFragment") || "." || getString(rule_${ruleId}, "config.inputSeries") || ".value")) as meterValue\nfrom MeasurementCreated measurementCreated\nwhere\n    rule_${ruleId} is not null\n    and (\n        measurementCreated.measurement.source.value in (getList(rule_${ruleId}, "enabledSources"))\n        or (getList(rule_${ruleId}, "enabledSources") is null and measurementCreated.measurement.source.value not in (getList(rule_${ruleId}, "disabledSources")))\n    );\n\n@Name("ValidateMeasurementNotNull")\n@Resilient\ninsert into InputData_${ruleId}\nselect \n    inputData.measurementCreated as measurementCreated,\n    inputData.meterValue as meterValue,\n    cast(inputData.measurementCreated.time.toMillisec() / (output_interval_${ruleId} * 1000), int) as timePoint \nfrom InputData_0_${ruleId} inputData\nwhere meterValue is not null;\n\n@Resilient\ncreate schema FirstAndLast(\n    size long,\n    firstMeterValue BigDecimal,\n    lastMeterValue BigDecimal,\n    firstTime Date,\n    lastTime Date,\n    source String,\n    type String\n);\n\n@Name("CreateCaptureSnapshotWindow")\n@Resilient\ncontext DeviceMeasurements_${ruleId}\ncreate window MeasSnapshot_${ruleId}.win:length(2).std:firstunique(timePoint) retain-intersection as InputData_${ruleId};\n\n@Name("CaptureSnapshot")\n@Resilient\ninsert into MeasSnapshot_${ruleId} select * from InputData_${ruleId};\n\n@Name("AssembleDataFromFirstAndLastMeasurement")\n@Resilient\ncontext DeviceMeasurements_${ruleId}\non MeasSnapshot_${ruleId}\ninsert into FirstAndLast\nselect\n    count(ms) as size,\n    first(ms.meterValue) as firstMeterValue,\n    first(ms.measurementCreated.time) as firstTime,\n    last(ms.meterValue) as lastMeterValue,\n    last(ms.measurementCreated.time) as lastTime,\n    context.key1 as source,\n    context.key2 as type\nfrom MeasSnapshot_${ruleId} ms;\n\n@Name("CreateMeasurement")\n@Resilient\nexpression calcConsumption(e) {\n    e => case e.lastTime.toMillisec() = e.firstTime.toMillisec()\n        when (true) then 0\n        else cast(((e.lastMeterValue - e.firstMeterValue) * 3600000), long) / (e.lastTime.toMillisec() - e.firstTime.toMillisec())\n    end\n}\ninsert into CreateMeasurement\nselect\n    type as type,\n    source as source,\n    lastTime as time,\n    {\n        getString(rule_${ruleId}, "config.outputFragment") || "." || getString(rule_${ruleId}, "config.outputSeries") || ".value",\n        calcConsumption(firstAndLast)\n    } as fragments\nfrom FirstAndLast as firstAndLast\nwhere\n    firstAndLast.size = 2;\n'}},t.onMissingMeasurementsCreateAlarm={name:"onMissingMeasurementsCreateAlarm",label:{input:"On missing measurements",output:"create alarm"},description:"Creates alarm when measurements are missing",category:"Measurements",contexts:{inputDataPoint:{
fragment:"config.measurementType"}},paramGroups:{input:{label:"Monitored measurement:",icon:"bar-chart",params:[{label:"Type",property:"measurementType",required:!0,type:"text"},{label:"Time interval",property:"timePeriod",required:!0,type:"timeInterval",default:3600,dontUseSeconds:!0}]},output:{label:"Create alarm:",icon:"bell",params:[{label:"Type",property:"alarmType",required:!0,type:"alarmType",default:"c8y_MissingMeasurementsAlarm"},{label:"Severity",property:"alarmSeverity",required:!0,type:"alarmSeverity",default:"MAJOR"},{label:"Text",property:"alarmText",required:!0,type:"text",default:"Missing measurements of type: #{type}",tokens:{"#{type}":"Measurement's type"}}]}},cepModule:{file:"alarmOnMissingMeasurement.epl",rule:'/* the id of MO with rule\'s configuration: ${ruleId} */\n\n@Resilient\ncreate schema InputData_0_${ruleId} (\n    measurement Measurement,\n    rule ManagedObject\n);\n\n@Resilient\ncreate schema InputData_${ruleId} (\n    measurement Measurement,\n    rule ManagedObject\n);\n\n@Resilient\ncreate schema OutputData_${ruleId} (\n    measurement Measurement,\n    rule ManagedObject,\n    time long\n);\n\n@Resilient\ncreate schema MissingMeasurement_${ruleId} (\n    lastInput InputData_${ruleId},\n    lastOutput OutputData_${ruleId}\n);\n\n@Resilient\ncreate context Measurements_${ruleId} partition by\n    measurement.source, measurement.type from InputData_${ruleId},\n    measurement.source, measurement.type from OutputData_${ruleId};\n\n@Resilient    \n@Name("GetRuleConfiguration")\ninsert into\n    InputData_0_${ruleId}\nselect\n    measurement as measurement,\n    findManagedObjectById("${ruleId}") as rule\nfrom\n    MeasurementCreated;\n\n@Resilient    \n@Name("ValidateMeasurement")\ninsert into\n    InputData_${ruleId}\nselect\n    measurement as measurement,\n    rule as rule\nfrom\n    InputData_0_${ruleId}\nwhere\n    measurement.type = getString(rule, "config.measurementType")\n    and (measurement.source.value in (getList(rule, "enabledSources"))\n        or (getList(rule, "enabledSources") is null and measurement.source.value not in (getList(rule, "disabledSources"))));\n\n@Resilient        \n@Name("CheckMeasurementsEveryMinute")\ncontext Measurements_${ruleId}\ninsert into MissingMeasurement_${ruleId}\nselect\n    (select * from InputData_${ruleId}.std:lastevent()) as lastInput,\n    (select * from OutputData_${ruleId}.std:lastevent()) as lastOutput\nfrom\n    pattern [every timer:at(*, *, *, *, *, 0)];\n\n@Resilient    \n@Name("ValidateDuration")\ninsert into OutputData_${ruleId}\nselect\n    lastInput.measurement as measurement,\n    lastInput.rule as rule,\n    current_timestamp() as time\nfrom\n    MissingMeasurement_${ruleId}\nwhere\n    lastInput is not null and\n    lastInput.measurement.time.before(current_timestamp(), cast(getNumber(lastInput.rule, "config.timePeriod"), long) seconds)\n    and (\n        lastOutput is null or\n        lastOutput.time.before(current_timestamp(), cast(getNumber(lastOutput.rule, "config.timePeriod"), long) seconds)\n    );\n\n@Resilient    \n@Name("CreateAlarm")\nexpression String js:eval(measurement, text) [\n    text\n        .replace("#{type}", measurement.type)\n]\ninsert into CreateAlarm\nselect\n    measurement.source as source,\n    "ACTIVE" as status,\n    current_timestamp().toDate() as time,\n    getString(rule, "config.alarmType") as type,\n    getString(rule, "config.alarmSeverity") as severity,\n    eval(measurement, getString(rule, "config.alarmText")) as text\nfrom\n    OutputData_${ruleId};\n    \n'}},t.onAlarmExecuteOperation={name:"onAlarmExecuteOperation",label:{input:"On alarm",output:"execute operation"},description:"Executes an operation when alarm is received",category:"Alarms",contexts:{inputAlarm:{type:"config.alarmType"},outputOperation:{template:"config.operation"}},paramGroups:{input:{label:"On alarm matching:",icon:"bell",params:[{label:"Type",property:"alarmType",required:!0,type:"alarmTypeMultiple"}]},output:{label:"Execute operation:",icon:"gamepad",params:[{label:"Operation",property:"operation",required:!0,type:"operation",default:{description:"Restart device",c8y_Restart:{}}}]}},cepModule:{file:"operationOnAlarm.epl",rule:'/* the id of MO with rule\'s configuration: ${ruleId}*/\n\ncreate schema InputData_0_${ruleId} (\n\talarm Alarm,\n\trule ManagedObject\n);\n\ncreate schema InputData_1_${ruleId} (\n\talarm Alarm,\n\toperationTemplate java.util.Map\n);\n\ncreate schema InputData_${ruleId} (\n\talarm Alarm,\n\toperation com.cumulocity.model.operation.Operation\n);\n\n@Name("GetRuleConfiguration")\ninsert into InputData_0_${ruleId}\nselect\n\talarmCreated.alarm as alarm,\n\tfindManagedObjectById("${ruleId}") as rule\nfrom\n\tAlarmCreated alarmCreated;\n\n@Name("ValidateAlarm")\ninsert into InputData_1_${ruleId}\nselect\n\talarm as alarm,\n\tcast(getObject(rule, "config.operation"), java.util.Map) as operationTemplate\nfrom\n\tInputData_0_${ruleId}\nwhere\n    getString(rule, "config.alarmType").split(",").anyOf(v => alarm.type = v.trim())\n\tand (alarm.source.value in (getList(rule, "enabledSources"))\n\t\tor (getList(rule, "enabledSources") is null and alarm.source.value not in (getList(rule, "disabledSources"))));\n\n@Name("CreateOperation")\ninsert into CreateOperation\nselect\n\tcast(createOperationFromTemplate(operationTemplate, alarm), com.cumulocity.model.operation.Operation) as operation,\n\talarm.source as deviceId,\n\t"PENDING" as status\nfrom\n\tInputData_1_${ruleId};\n'}},t.explicitThresholdSmartRule={name:"explicitThresholdSmartRule",label:{input:"On measurement explicit threshold",output:"create alarm"},description:"Create alarm when measurement reaches explicit thresholds",category:"Measurements",contexts:{inputDataPoint:{fragment:"config.fragment",series:"config.series",redRangeMin:"config.redRangeMin",redRangeMax:"config.redRangeMax"},inputKpi:{id:"config.kpiId"}},paramGroups:{input:{label:"On threshold:",icon:"bar-chart",params:[{label:"Fragment",property:"fragment",required:!0,type:"text"},{label:"Series",property:"series",required:!0,type:"text"},{label:"Red range (min)",property:"redRangeMin",required:!0,type:"number",default:90},{label:"Red range (max)",property:"redRangeMax",required:!0,type:"number",default:100},{type:"hidden",property:"explicitVariant",default:!0}]},output:{label:"Create alarm:",icon:"bell",params:[{label:"Type",property:"alarmType",required:!0,type:"alarmType",default:"c8y_ThresholdAlarm"},{label:"Text",property:"alarmText",required:!0,type:"text",default:"Threshold exceeded",tokens:{"#{type}":"Alarm's type","#{time}":"Alarm's time","#{sourceId}":"Alarm's source id"}}]}},cepModule:{file:"thresholdSmartRule.epl",rule:'/* the id of MO with rule\'s configuration: ${ruleId}*/\n@Resilient\ncreate schema InputData_0_${ruleId} (\n\tmeasurementCreated MeasurementCreated,\n\tconfig ThresholdRuleConfig,\n\tsourceId Object\n);\n\n@Name("GetRuleConfiguration")\n@Resilient\ninsert into InputData_0_${ruleId}\nselect\n\tmc as measurementCreated,\n\tgetThresholdRuleConfig ("${ruleId}", mc.measurement.source.value) as config,\n\tmc.measurement.source.value as sourceId\nfrom MeasurementCreated mc;\n\n@Resilient\ncreate schema InputData_1_${ruleId} (\n\tmeasurementCreated MeasurementCreated,\n\tconfig ThresholdRuleConfig,\n\tvalue BigDecimal\n);\n\n@Name("ValidateMeasurementSource")\n@Resilient\ninsert into InputData_1_${ruleId}\nselect\n\tmeasurementCreated as measurementCreated,\n\tconfig as config,\n\tgetNumber(measurementCreated.measurement, config.valuePath) as value\nfrom InputData_0_${ruleId}\nwhere\n\tconfig is not null\n\tand config.isValid()\n\tand (\n\t\tsourceId in (config.enabledSources)\n\t\tor (config.enabledSources is null and sourceId not in (config.disabledSources))\n\t);\n\n@Resilient\ncreate schema InputData_${ruleId} (\n\tmeasurementCreated MeasurementCreated,\n\tconfig ThresholdRuleConfig,\n\tcolor String\n);\n\n@Name("ValidateMeasurement")\n@Resilient\nexpression getColor(i) {\n\ti => case\n\t\twhen (i.value in [i.config.yellowMin: i.config.yellowMax)) then "Y"\n\t\twhen (i.value in [i.config.redMin: i.config.redMax]) then "R"\n\t\telse "G"\n\tend\n}\ninsert into InputData_${ruleId}\nselect\n\tmeasurementCreated as measurementCreated,\n\tconfig as config,\n\tgetColor(inputData) as color\nfrom InputData_1_${ruleId} inputData\nwhere inputData.value is not null;\n\n@Resilient\ncreate schema InputDataPair_${ruleId} (\n\tfirstAlarm InputData_${ruleId},\n\tsecondAlarm InputData_${ruleId}\n);\n\n@Resilient\ncreate context Measurements_${ruleId}\n\tpartition by measurementCreated.measurement.source from InputData_${ruleId};\n\n@Name("TakeLastTwoMeasurements")\n@Resilient\ncontext Measurements_${ruleId}\ninsert into InputDataPair_${ruleId}\nselect\n\tfirst(*) as firstAlarm,\n\tlast(*) as secondAlarm\nfrom\n\tInputData_${ruleId}.win:length(2)\nhaving first(color) != last(color) or first(measurementCreated.id) = last(measurementCreated.id);\n\n@Resilient\ncreate schema OutputAlarm_0_${ruleId} (\n\tstatus CumulocityAlarmStatuses,\n\tseverity CumulocitySeverities,\n\tconfig ThresholdRuleConfig,\n\tmeasurement Measurement\n);\n\n@Name("ResolveSeverityAndStatusForThresholdAlarm")\n@Resilient\nexpression getSeverity(idp) {\n\tidp => case when idp.firstAlarm.measurementCreated.id = idp.secondAlarm.measurementCreated.id\n\t\tthen\n\t\t\tcase idp.secondAlarm.color\n\t\t\t\twhen "Y" then CumulocitySeverities.MINOR\n\t\t\t\twhen "R" then CumulocitySeverities.CRITICAL\n\t\t\t\twhen "G" then null\n\t\t\tend\n\t\telse\n\t\t\tcase idp.firstAlarm.color || idp.secondAlarm.color\n\t\t\t\twhen "GY" then CumulocitySeverities.MINOR\n\t\t\t\twhen "GR" then CumulocitySeverities.CRITICAL\n\t\t\t\twhen "YG" then null\n\t\t\t\twhen "YR" then CumulocitySeverities.CRITICAL\n\t\t\t\twhen "RG" then null\n\t\t\t\twhen "RY" then CumulocitySeverities.MINOR\n\t\t\tend\n\t\tend\n}\nexpression getStatus(idp) {\n\tidp => case idp.secondAlarm.color\n\t\twhen "G" then CumulocityAlarmStatuses.CLEARED\n\t\telse CumulocityAlarmStatuses.ACTIVE\n\tend\n}\ninsert into OutputAlarm_0_${ruleId}\nselect\n\tgetStatus(idp) as status,\n\tgetSeverity(idp) as severity,\n\tidp.secondAlarm.config as config,\n\tidp.secondAlarm.measurementCreated.measurement as measurement\nfrom InputDataPair_${ruleId} idp;\n\n@Resilient\ncreate schema OutputAlarm_${ruleId} (\n\tstatus CumulocityAlarmStatuses,\n\tseverity CumulocitySeverities,\n\ttext String,\n\ttype String,\n\tpreviousAlarm Alarm,\n\tmeasurement Measurement\n);\n\n@Name("GetLatestActiveAlarmOfSameType")\n@Resilient\ninsert into OutputAlarm_${ruleId}\nselect\n\tstatus as status,\n\tseverity as severity,\n\tconfig.alarmText as text,\n\tconfig.alarmType as type,\n\tfindFirstAlarmBySourceAndStatusAndType(measurement.source.value, "ACTIVE", config.alarmType) as previousAlarm,\n\tmeasurement as measurement\nfrom OutputAlarm_0_${ruleId} o;\n\n@Name("CreateAlarm")\n@Resilient\nexpression String js:eval(measurement, text) [\n\ttext\n\t\t.replace("#{type}", measurement.type)\n\t\t.replace("#{time}", measurement.time)\n\t\t.replace("#{sourceId}", measurement.source.value)\n]\ninsert into CreateAlarm\nselect\n\tstatus as status,\n\tseverity as severity,\n\tmeasurement.source as source,\n\teval(measurement, text) as text,\n\ttype as type,\n\tmeasurement.time as time\nfrom OutputAlarm_${ruleId}\nwhere\n\tpreviousAlarm is null\n\tand status = CumulocityAlarmStatuses.ACTIVE;\n\n@Name("UpdateAlarmSeverity")\n@Resilient\ninsert into UpdateAlarm\nselect\n\tpreviousAlarm.id as id,\n\tstatus as status,\n\tseverity as severity\nfrom OutputAlarm_${ruleId}\nwhere\n\tpreviousAlarm is not null\n\tand severity is not null;\n\n@Name("UpdateAlarmStatus")\n@Resilient\ninsert into UpdateAlarm\nselect\n\tpreviousAlarm.id as id,\n\tstatus as status\nfrom OutputAlarm_${ruleId}\nwhere\n\tpreviousAlarm is not null\n\tand severity is null;'}},t.thresholdSmartRule={name:"thresholdSmartRule",label:{input:"On measurement threshold",output:"create alarm"},description:"Creates alarms when measurement reaches thresholds",category:"Measurements",contexts:{inputDataPoint:{fragment:"config.fragment",series:"config.series"},inputKpi:{id:"config.kpiId"}},paramGroups:{input:{label:"On threshold:",icon:"bar-chart",params:[{label:"Fragment",property:"fragment",required:!0,type:"text"},{label:"Series",property:"series",required:!0,type:"text"},{label:"Data point",property:"kpiId",required:!1,type:"kpi"}]},output:{label:"Create alarm:",icon:"bell",params:[{label:"Type",property:"alarmType",required:!0,type:"alarmType",default:"c8y_ThresholdAlarm"},{label:"Text",property:"alarmText",required:!0,type:"text",default:"Thresholds exceeded",tokens:{"#{type}":"Alarm's type","#{time}":"Alarm's time","#{sourceId}":"Alarm's source id"}}]}},cepModule:{file:"thresholdSmartRule.epl",rule:'/* the id of MO with rule\'s configuration: ${ruleId}*/\n@Resilient\ncreate schema InputData_0_${ruleId} (\n\tmeasurementCreated MeasurementCreated,\n\tconfig ThresholdRuleConfig,\n\tsourceId Object\n);\n\n@Name("GetRuleConfiguration")\n@Resilient\ninsert into InputData_0_${ruleId}\nselect\n\tmc as measurementCreated,\n\tgetThresholdRuleConfig ("${ruleId}", mc.measurement.source.value) as config,\n\tmc.measurement.source.value as sourceId\nfrom MeasurementCreated mc;\n\n@Resilient\ncreate schema InputData_1_${ruleId} (\n\tmeasurementCreated MeasurementCreated,\n\tconfig ThresholdRuleConfig,\n\tvalue BigDecimal\n);\n\n@Name("ValidateMeasurementSource")\n@Resilient\ninsert into InputData_1_${ruleId}\nselect\n\tmeasurementCreated as measurementCreated,\n\tconfig as config,\n\tgetNumber(measurementCreated.measurement, config.valuePath) as value\nfrom InputData_0_${ruleId}\nwhere\n\tconfig is not null\n\tand config.isValid()\n\tand (\n\t\tsourceId in (config.enabledSources)\n\t\tor (config.enabledSources is null and sourceId not in (config.disabledSources))\n\t);\n\n@Resilient\ncreate schema InputData_${ruleId} (\n\tmeasurementCreated MeasurementCreated,\n\tconfig ThresholdRuleConfig,\n\tcolor String\n);\n\n@Name("ValidateMeasurement")\n@Resilient\nexpression getColor(i) {\n\ti => case\n\t\twhen (i.value in [i.config.yellowMin: i.config.yellowMax)) then "Y"\n\t\twhen (i.value in [i.config.redMin: i.config.redMax]) then "R"\n\t\telse "G"\n\tend\n}\ninsert into InputData_${ruleId}\nselect\n\tmeasurementCreated as measurementCreated,\n\tconfig as config,\n\tgetColor(inputData) as color\nfrom InputData_1_${ruleId} inputData\nwhere inputData.value is not null;\n\n@Resilient\ncreate schema InputDataPair_${ruleId} (\n\tfirstAlarm InputData_${ruleId},\n\tsecondAlarm InputData_${ruleId}\n);\n\n@Resilient\ncreate context Measurements_${ruleId}\n\tpartition by measurementCreated.measurement.source from InputData_${ruleId};\n\n@Name("TakeLastTwoMeasurements")\n@Resilient\ncontext Measurements_${ruleId}\ninsert into InputDataPair_${ruleId}\nselect\n\tfirst(*) as firstAlarm,\n\tlast(*) as secondAlarm\nfrom\n\tInputData_${ruleId}.win:length(2)\nhaving first(color) != last(color) or first(measurementCreated.id) = last(measurementCreated.id);\n\n@Resilient\ncreate schema OutputAlarm_0_${ruleId} (\n\tstatus CumulocityAlarmStatuses,\n\tseverity CumulocitySeverities,\n\tconfig ThresholdRuleConfig,\n\tmeasurement Measurement\n);\n\n@Name("ResolveSeverityAndStatusForThresholdAlarm")\n@Resilient\nexpression getSeverity(idp) {\n\tidp => case when idp.firstAlarm.measurementCreated.id = idp.secondAlarm.measurementCreated.id\n\t\tthen\n\t\t\tcase idp.secondAlarm.color\n\t\t\t\twhen "Y" then CumulocitySeverities.MINOR\n\t\t\t\twhen "R" then CumulocitySeverities.CRITICAL\n\t\t\t\twhen "G" then null\n\t\t\tend\n\t\telse\n\t\t\tcase idp.firstAlarm.color || idp.secondAlarm.color\n\t\t\t\twhen "GY" then CumulocitySeverities.MINOR\n\t\t\t\twhen "GR" then CumulocitySeverities.CRITICAL\n\t\t\t\twhen "YG" then null\n\t\t\t\twhen "YR" then CumulocitySeverities.CRITICAL\n\t\t\t\twhen "RG" then null\n\t\t\t\twhen "RY" then CumulocitySeverities.MINOR\n\t\t\tend\n\t\tend\n}\nexpression getStatus(idp) {\n\tidp => case idp.secondAlarm.color\n\t\twhen "G" then CumulocityAlarmStatuses.CLEARED\n\t\telse CumulocityAlarmStatuses.ACTIVE\n\tend\n}\ninsert into OutputAlarm_0_${ruleId}\nselect\n\tgetStatus(idp) as status,\n\tgetSeverity(idp) as severity,\n\tidp.secondAlarm.config as config,\n\tidp.secondAlarm.measurementCreated.measurement as measurement\nfrom InputDataPair_${ruleId} idp;\n\n@Resilient\ncreate schema OutputAlarm_${ruleId} (\n\tstatus CumulocityAlarmStatuses,\n\tseverity CumulocitySeverities,\n\ttext String,\n\ttype String,\n\tpreviousAlarm Alarm,\n\tmeasurement Measurement\n);\n\n@Name("GetLatestActiveAlarmOfSameType")\n@Resilient\ninsert into OutputAlarm_${ruleId}\nselect\n\tstatus as status,\n\tseverity as severity,\n\tconfig.alarmText as text,\n\tconfig.alarmType as type,\n\tfindFirstAlarmBySourceAndStatusAndType(measurement.source.value, "ACTIVE", config.alarmType) as previousAlarm,\n\tmeasurement as measurement\nfrom OutputAlarm_0_${ruleId} o;\n\n@Name("CreateAlarm")\n@Resilient\nexpression String js:eval(measurement, text) [\n\ttext\n\t\t.replace("#{type}", measurement.type)\n\t\t.replace("#{time}", measurement.time)\n\t\t.replace("#{sourceId}", measurement.source.value)\n]\ninsert into CreateAlarm\nselect\n\tstatus as status,\n\tseverity as severity,\n\tmeasurement.source as source,\n\teval(measurement, text) as text,\n\ttype as type,\n\tmeasurement.time as time\nfrom OutputAlarm_${ruleId}\nwhere\n\tpreviousAlarm is null\n\tand status = CumulocityAlarmStatuses.ACTIVE;\n\n@Name("UpdateAlarmSeverity")\n@Resilient\ninsert into UpdateAlarm\nselect\n\tpreviousAlarm.id as id,\n\tstatus as status,\n\tseverity as severity\nfrom OutputAlarm_${ruleId}\nwhere\n\tpreviousAlarm is not null\n\tand severity is not null;\n\n@Name("UpdateAlarmStatus")\n@Resilient\ninsert into UpdateAlarm\nselect\n\tpreviousAlarm.id as id,\n\tstatus as status\nfrom OutputAlarm_${ruleId}\nwhere\n\tpreviousAlarm is not null\n\tand severity is null;'}},t.onAlarmTextToSpeechCall={name:"onAlarmTextToSpeechCall",label:{input:"On alarm",output:"initiate text-to-speech call"},description:"When alarm is received, text-to-speech call is initiated",category:"Alarms",contexts:{inputAlarm:{type:"config.alarmType"}},paramGroups:{input:{label:"On alarm matching:",icon:"bell",params:[{label:"Alarm type",property:"alarmType",required:!0,type:"alarmTypeMultiple"}]},output:{label:"Text-to-speech:",icon:"mobile",params:[{label:"Phone number",property:"to",required:!0,type:"text"},{label:"Message",property:"text",required:!0,type:"textarea",default:"Alarm occurred"},{label:"Retries",property:"retries",required:!0,type:"number",default:0,maxNumber:20},{label:"Interval",property:"timeout",required:!0,type:"number",default:5},{label:"Acknowledgement",property:"acknowledgement",required:!1,type:"checkbox",default:!1},{label:"Acknowledgement text",property:"acknowledgeText",requireIf:"rule.config.acknowledgement===true",type:"text",default:"Please acknowledge this call by pressing the button 5",showIf:"rule.config.acknowledgement===true",setIf:"rule.config.acknowledgement===true"},{label:"Acknowledgement number",property:"acknowledgeNumber",requireIf:"rule.config.acknowledgement===true",type:"number",default:5,minNumber:0,maxNumber:9,showIf:"rule.config.acknowledgement===true",setIf:"rule.config.acknowledgement===true"}]}},cepModule:{file:"t2sOnAlarm.epl",rule:'/**\n * Assume rule format:\n *\n {\n\t"disabledSources",\n    "enabledSources",\n    "config": {\n        "alarmType",\n        "to": "+48 543 43 322",\n        "text": "New #{severity} alarm has been received from #{source.name}. Alarm text is: \\"#{text}\\".",\n        "retries": int,\n        "timeout": //in minutes,\n        "questionText": "Do you want change alarm status to acknowledge - press 5",\n\t\t"acknowledgeButton: 5\n    }\n}\n *\n */\n\ncreate schema InputData_0_${ruleId} (\n\talarm Alarm,\n\trule Map\n);\n\n@Name("GetRuleConfiguration")\ninsert into InputData_0_${ruleId}\nselect\n\talarmCreated.alarm as alarm,\n\t(findManagedObjectById("${ruleId}")).getAttrs() as rule\nfrom\n\tAlarmCreated alarmCreated;\n\n@Name("ValidateAlarm")\ninsert into InputData_1_${ruleId}\nselect\n\talarm as alarm,\n\trule as rule\nfrom\n\tInputData_0_${ruleId}\nwhere\n\tnot inMaintenanceMode(alarm.source)\n\tand getString(rule, "config.alarmType").split(",").anyOf(v => alarm.type = v.trim())\n\tand (alarm.source.value in (getList(rule, "enabledSources"))\n\t\tor (getList(rule, "enabledSources") is null and alarm.source.value not in (getList(rule, "disabledSources"))));\n\ncreate schema InputData_${ruleId} (\n\talarm Alarm,\n    phoneNumber String,\n    textToSpeech String,\n    attempts Number,\n    timeout Number,\n    questionText String,\n    acknowledgeButton Number\n);\n\n@Name("AssembleDataFromConfiguration")\ninsert into InputData_${ruleId}\nselect\n\talarm as alarm,\n\tgetString(rule, "config.to") as phoneNumber,\n\tgetString(rule, "config.text") as textToSpeech,\n\tgetNumber(rule, "config.retries") as attempts,\n\tgetNumber(rule, "config.timeout") as timeout,\n\tgetString(rule, "config.acknowledgeText") as questionText,\n\tgetNumber(rule, "config.acknowledgeNumber") as acknowledgeButton\nfrom\n\tInputData_1_${ruleId};\n\n@Name("SendSpeech")\ninsert into SendSpeech\nselect\n\tinputData.phoneNumber as phoneNumber,\n\treplaceAllPlaceholders(inputData.textToSpeech, inputData.alarm) as textToSpeech,\n\tinputData.alarm.source.value as deviceId,\n\tcast(inputData.attempts?, long) as attempts,\n\tcast(inputData.timeout?, long) as timeout,\n\tinputData.alarm.id.value as alarmId,\n\tinputData.questionText as questionText,\n\tcast(inputData.acknowledgeButton?, long) as acknowledgeButton\nfrom\n\tInputData_${ruleId} inputData;\n'}},t.sendDashboardsViaEmail={name:"sendDashboardsViaEmail",label:{input:"On timer",output:"send dashboard via e-mail"},description:"Send dashboard via email",category:"Dashboard",noTarget:!0,contexts:{},hideFromList:!0,paramGroups:{input:{label:"Dashboard & frequency",icon:"asterisk",params:[{label:"Dashboard",property:"url",required:!0,type:"dashboard"},{label:"Frequency",property:"frequency",required:!0,type:"frequency"}]},output:{label:"Send e-mail:",icon:"envelope",params:[{label:"Send to",property:"to",required:!0,type:"email"},{label:"Send CC to",property:"cc",required:!1,type:"email"},{label:"Send BCC to",property:"bcc",required:!1,type:"email"},{label:"Reply to",property:"replyTo",required:!1,type:"email"},{label:"Subject",property:"subject",required:!0,type:"text",default:"Print screen of dashboard"},{label:"Message",property:"text",required:!0,type:"textarea",default:""}]}},cepModule:{file:"sendDashboardInEmail.epl",rule:'create variable ManagedObject rule_${ruleId} = findManagedObjectById("${ruleId}");\ncreate variable string minute_${ruleId} = getString(rule_${ruleId}, "config.minute");\ncreate variable string hour_${ruleId} = getString(rule_${ruleId}, "config.hour");\ncreate variable string dayOfMonth_${ruleId} = getString(rule_${ruleId}, "config.day");\ncreate variable string month_${ruleId} = getString(rule_${ruleId}, "config.month");\ncreate variable string dayOfWeek_${ruleId} = getString(rule_${ruleId}, "config.weekday");\n\n@Name("SendDashboard")\ninsert into SendDashboard\nselect\n getString(rule_${ruleId}, "config.url") as dashboardUrl,\n getString(rule_${ruleId}, "config.subject") as subject,\n getString(rule_${ruleId}, "config.text") as text,\n getString(rule_${ruleId}, "config.replyTo") as replyTo,\n getString(rule_${ruleId}, "config.to") as receiver,\n getString(rule_${ruleId}, "config.cc") as cc,\n getString(rule_${ruleId}, "config.bcc") as bcc\nfrom\n pattern [every timer:at(toNumberSetParameter(minute_${ruleId}),\n toNumberSetParameter(hour_${ruleId}),\n toNumberSetParameter(dayOfMonth_${ruleId}),\n toNumberSetParameter(month_${ruleId}),\n toNumberSetParameter(dayOfWeek_${ruleId}))];\n'}}}(window);